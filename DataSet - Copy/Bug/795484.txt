[Desktop Build]B2G Desktop crashes on startup in nsBlockFrame::SetInitialChildList
bsmedberg's fix for the Windows-specific B2G Desktop startup crash bug 794662 exposed another Windows-specific crash on B2G Desktop startup, this one in nsBlockFrame::SetInitialChildList.

Here's an uninformative crash report (symbols unavailable due to bug 785698):

https://crash-stats.mozilla.com/report/index/359245af-0c15-4b2c-83af-2541e2120928

And here's a stack from my local build:

 Index  Function
--------------------------------------------------------------------------------
 1      KernelBase.dll!_DebugBreak@0() 
*2      xul.dll!RealBreak() 
 3      xul.dll!Break(const char * aMsg=0x00368b10) 
 4      xul.dll!NS_DebugBreak_P(unsigned int aSeverity=1, const char * aStr=0x11806f3c, const char * aExpr=0x11806f70, const char * aFile=0x11806efc, int aLine=6571) 
 5      xul.dll!nsBlockFrame::SetInitialChildList(mozilla::layout::FrameChildListID aListID=kPrincipalList, nsFrameList & aChildList={...}) 
 6      xul.dll!nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsFrameConstructorState & aState={...}, nsIFrame * aParentFrame=0x0e2e8800, nsFrameItems & aFrameItems={...}) 
 7      xul.dll!nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList::Iterator & aIter={...}, nsIFrame * aParentFrame=0x0e2e8800, nsFrameItems & aFrameItems={...}) 
 8      xul.dll!nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList & aItems={...}, nsIFrame * aParentFrame=0x0e2e8800, nsFrameItems & aFrameItems={...}) 
 9      xul.dll!nsCSSFrameConstructor::ProcessChildren(nsFrameConstructorState & aState={...}, nsIContent * aContent=0x0e69bc40, nsStyleContext * aStyleContext=0x0e2e85c0, nsIFrame * aFrame=0x0e2e8800, const bool aCanHaveGeneratedContent=true, nsFrameItems & aFrameItems={...}, const bool aAllowBlockStyles=true, PendingBinding * aPendingBinding=0x00000000, nsIFrame * aPossiblyLeafFrame=0x0e2e8800) 
 10     xul.dll!nsCSSFrameConstructor::ConstructBlock(nsFrameConstructorState & aState={...}, const nsStyleDisplay * aDisplay=0x0e2e8618, nsIContent * aContent=0x0e69bc40, nsIFrame * aParentFrame=0x0e2e8428, nsIFrame * aContentParentFrame=0x0e2e8428, nsStyleContext * aStyleContext=0x0e2e85c0, nsIFrame * * aNewFrame=0x00369448, nsFrameItems & aFrameItems={...}, bool aAbsPosContainer=true, PendingBinding * aPendingBinding=0x00000000) 
 11     xul.dll!nsCSSFrameConstructor::ConstructNonScrollableBlock(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsIFrame * aParentFrame=0x0e2e8428, const nsStyleDisplay * aDisplay=0x0e2e8618, nsFrameItems & aFrameItems={...}, nsIFrame * * aNewFrame=0x00369448) 
 12     xul.dll!nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsFrameConstructorState & aState={...}, nsIFrame * aParentFrame=0x0e2e8428, nsFrameItems & aFrameItems={...}) 
 13     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList::Iterator & aIter={...}, nsIFrame * aParentFrame=0x0e2e8428, nsFrameItems & aFrameItems={...}) 
 14     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList & aItems={...}, nsIFrame * aParentFrame=0x0e2e8428, nsFrameItems & aFrameItems={...}) 
 15     xul.dll!nsCSSFrameConstructor::ProcessChildren(nsFrameConstructorState & aState={...}, nsIContent * aContent=0x0e69bba0, nsStyleContext * aStyleContext=0x0e2e80f0, nsIFrame * aFrame=0x0e2e8428, const bool aCanHaveGeneratedContent=true, nsFrameItems & aFrameItems={...}, const bool aAllowBlockStyles=true, PendingBinding * aPendingBinding=0x00000000, nsIFrame * aPossiblyLeafFrame=0x0e2e8428) 
 16     xul.dll!nsCSSFrameConstructor::ConstructBlock(nsFrameConstructorState & aState={...}, const nsStyleDisplay * aDisplay=0x0e2e8148, nsIContent * aContent=0x0e69bba0, nsIFrame * aParentFrame=0x0e2e7fc8, nsIFrame * aContentParentFrame=0x0e2e7fc8, nsStyleContext * aStyleContext=0x0e2e80f0, nsIFrame * * aNewFrame=0x003697ec, nsFrameItems & aFrameItems={...}, bool aAbsPosContainer=true, PendingBinding * aPendingBinding=0x00000000) 
 17     xul.dll!nsCSSFrameConstructor::ConstructNonScrollableBlock(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsIFrame * aParentFrame=0x0e2e7fc8, const nsStyleDisplay * aDisplay=0x0e2e8148, nsFrameItems & aFrameItems={...}, nsIFrame * * aNewFrame=0x003697ec) 
 18     xul.dll!nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsFrameConstructorState & aState={...}, nsIFrame * aParentFrame=0x0e2e7fc8, nsFrameItems & aFrameItems={...}) 
 19     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList::Iterator & aIter={...}, nsIFrame * aParentFrame=0x0e2e7fc8, nsFrameItems & aFrameItems={...}) 
 20     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList & aItems={...}, nsIFrame * aParentFrame=0x0e2e7fc8, nsFrameItems & aFrameItems={...}) 
 21     xul.dll!nsCSSFrameConstructor::ProcessChildren(nsFrameConstructorState & aState={...}, nsIContent * aContent=0x0e69bb00, nsStyleContext * aStyleContext=0x0e2e7bb8, nsIFrame * aFrame=0x0e2e7fc8, const bool aCanHaveGeneratedContent=true, nsFrameItems & aFrameItems={...}, const bool aAllowBlockStyles=true, PendingBinding * aPendingBinding=0x00000000, nsIFrame * aPossiblyLeafFrame=0x0e2e7fc8) 
 22     xul.dll!nsCSSFrameConstructor::ConstructBlock(nsFrameConstructorState & aState={...}, const nsStyleDisplay * aDisplay=0x0e2e7c10, nsIContent * aContent=0x0e69bb00, nsIFrame * aParentFrame=0x0e2e7ae8, nsIFrame * aContentParentFrame=0x0e2e7ae8, nsStyleContext * aStyleContext=0x0e2e7bb8, nsIFrame * * aNewFrame=0x00369b90, nsFrameItems & aFrameItems={...}, bool aAbsPosContainer=true, PendingBinding * aPendingBinding=0x00000000) 
 23     xul.dll!nsCSSFrameConstructor::ConstructNonScrollableBlock(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsIFrame * aParentFrame=0x0e2e7ae8, const nsStyleDisplay * aDisplay=0x0e2e7c10, nsFrameItems & aFrameItems={...}, nsIFrame * * aNewFrame=0x00369b90) 
 24     xul.dll!nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsFrameConstructorState & aState={...}, nsIFrame * aParentFrame=0x0e2e7ae8, nsFrameItems & aFrameItems={...}) 
 25     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList::Iterator & aIter={...}, nsIFrame * aParentFrame=0x0e2e7ae8, nsFrameItems & aFrameItems={...}) 
 26     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList & aItems={...}, nsIFrame * aParentFrame=0x0e2e7ae8, nsFrameItems & aFrameItems={...}) 
 27     xul.dll!nsCSSFrameConstructor::ProcessChildren(nsFrameConstructorState & aState={...}, nsIContent * aContent=0x0e69ba60, nsStyleContext * aStyleContext=0x0e292638, nsIFrame * aFrame=0x0e2e7ae8, const bool aCanHaveGeneratedContent=true, nsFrameItems & aFrameItems={...}, const bool aAllowBlockStyles=true, PendingBinding * aPendingBinding=0x00000000, nsIFrame * aPossiblyLeafFrame=0x0e2e7ae8) 
 28     xul.dll!nsCSSFrameConstructor::ConstructBlock(nsFrameConstructorState & aState={...}, const nsStyleDisplay * aDisplay=0x0e292690, nsIContent * aContent=0x0e69ba60, nsIFrame * aParentFrame=0x0e291da0, nsIFrame * aContentParentFrame=0x0e291da0, nsStyleContext * aStyleContext=0x0e292638, nsIFrame * * aNewFrame=0x00369f34, nsFrameItems & aFrameItems={...}, bool aAbsPosContainer=true, PendingBinding * aPendingBinding=0x00000000) 
 29     xul.dll!nsCSSFrameConstructor::ConstructNonScrollableBlock(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsIFrame * aParentFrame=0x0e291da0, const nsStyleDisplay * aDisplay=0x0e292690, nsFrameItems & aFrameItems={...}, nsIFrame * * aNewFrame=0x00369f34) 
 30     xul.dll!nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsFrameConstructorState & aState={...}, nsIFrame * aParentFrame=0x0e291da0, nsFrameItems & aFrameItems={...}) 
 31     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList::Iterator & aIter={...}, nsIFrame * aParentFrame=0x0e291da0, nsFrameItems & aFrameItems={...}) 
 32     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList & aItems={...}, nsIFrame * aParentFrame=0x0e291da0, nsFrameItems & aFrameItems={...}) 
 33     xul.dll!nsCSSFrameConstructor::ProcessChildren(nsFrameConstructorState & aState={...}, nsIContent * aContent=0x0e698290, nsStyleContext * aStyleContext=0x0e291ba8, nsIFrame * aFrame=0x0e291da0, const bool aCanHaveGeneratedContent=true, nsFrameItems & aFrameItems={...}, const bool aAllowBlockStyles=true, PendingBinding * aPendingBinding=0x00000000, nsIFrame * aPossiblyLeafFrame=0x0e291da0) 
 34     xul.dll!nsCSSFrameConstructor::ConstructBlock(nsFrameConstructorState & aState={...}, const nsStyleDisplay * aDisplay=0x0e291c70, nsIContent * aContent=0x0e698290, nsIFrame * aParentFrame=0x0e291aa0, nsIFrame * aContentParentFrame=0x0e291aa0, nsStyleContext * aStyleContext=0x0e291ba8, nsIFrame * * aNewFrame=0x0036a1f0, nsFrameItems & aFrameItems={...}, bool aAbsPosContainer=true, PendingBinding * aPendingBinding=0x00000000) 
 35     xul.dll!nsCSSFrameConstructor::ConstructScrollableBlock(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsIFrame * aParentFrame=0x0e291868, const nsStyleDisplay * aDisplay=0x0e2918f0, nsFrameItems & aFrameItems={...}, nsIFrame * * aNewFrame=0x0036a2f8) 
 36     xul.dll!nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsFrameConstructorState & aState={...}, nsIFrame * aParentFrame=0x0e291868, nsFrameItems & aFrameItems={...}) 
 37     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList::Iterator & aIter={...}, nsIFrame * aParentFrame=0x0e291868, nsFrameItems & aFrameItems={...}) 
 38     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList & aItems={...}, nsIFrame * aParentFrame=0x0e291868, nsFrameItems & aFrameItems={...}) 
 39     xul.dll!nsCSSFrameConstructor::ProcessChildren(nsFrameConstructorState & aState={...}, nsIContent * aContent=0x0e6981f0, nsStyleContext * aStyleContext=0x0e291720, nsIFrame * aFrame=0x0e291868, const bool aCanHaveGeneratedContent=true, nsFrameItems & aFrameItems={...}, const bool aAllowBlockStyles=true, PendingBinding * aPendingBinding=0x00000000, nsIFrame * aPossiblyLeafFrame=0x0e291868) 
 40     xul.dll!nsCSSFrameConstructor::ConstructBlock(nsFrameConstructorState & aState={...}, const nsStyleDisplay * aDisplay=0x0d834928, nsIContent * aContent=0x0e6981f0, nsIFrame * aParentFrame=0x0e291340, nsIFrame * aContentParentFrame=0x0e291340, nsStyleContext * aStyleContext=0x0e291720, nsIFrame * * aNewFrame=0x0036a69c, nsFrameItems & aFrameItems={...}, bool aAbsPosContainer=false, PendingBinding * aPendingBinding=0x00000000) 
 41     xul.dll!nsCSSFrameConstructor::ConstructNonScrollableBlock(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsIFrame * aParentFrame=0x0e291340, const nsStyleDisplay * aDisplay=0x0d834928, nsFrameItems & aFrameItems={...}, nsIFrame * * aNewFrame=0x0036a69c) 
 42     xul.dll!nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem & aItem={...}, nsFrameConstructorState & aState={...}, nsIFrame * aParentFrame=0x0e291340, nsFrameItems & aFrameItems={...}) 
 43     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList::Iterator & aIter={...}, nsIFrame * aParentFrame=0x0e291340, nsFrameItems & aFrameItems={...}) 
 44     xul.dll!nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState & aState={...}, nsCSSFrameConstructor::FrameConstructionItemList & aItems={...}, nsIFrame * aParentFrame=0x0e291340, nsFrameItems & aFrameItems={...}) 
 45     xul.dll!nsCSSFrameConstructor::ProcessChildren(nsFrameConstructorState & aState={...}, nsIContent * aContent=0x0e677820, nsStyleContext * aStyleContext=0x0e2912d8, nsIFrame * aFrame=0x0e291340, const bool aCanHaveGeneratedContent=true, nsFrameItems & aFrameItems={...}, const bool aAllowBlockStyles=true, PendingBinding * aPendingBinding=0x00000000, nsIFrame * aPossiblyLeafFrame=0x0e291340) 
 46     xul.dll!nsCSSFrameConstructor::ConstructBlock(nsFrameConstructorState & aState={...}, const nsStyleDisplay * aDisplay=0x0d834718, nsIContent * aContent=0x0e677820, nsIFrame * aParentFrame=0x0d834a58, nsIFrame * aContentParentFrame=0x0d834a58, nsStyleContext * aStyleContext=0x0e2912d8, nsIFrame * * aNewFrame=0x0036ac80, nsFrameItems & aFrameItems={...}, bool aAbsPosContainer=false, PendingBinding * aPendingBinding=0x00000000) 
 47     xul.dll!nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element * aDocElement=0x0e677820, nsILayoutHistoryState * aFrameState=0x00000000, nsIFrame * * aNewFrame=0x0036ad60) 
 48     xul.dll!nsCSSFrameConstructor::ContentRangeInserted(nsIContent * aContainer=0x00000000, nsIContent * aStartChild=0x0e677820, nsIContent * aEndChild=0x00000000, nsILayoutHistoryState * aFrameState=0x00000000, bool aAllowLazyConstruction=false) 
 49     xul.dll!nsCSSFrameConstructor::ContentInserted(nsIContent * aContainer=0x00000000, nsIContent * aChild=0x0e677820, nsILayoutHistoryState * aFrameState=0x00000000, bool aAllowLazyConstruction=false) 
 50     xul.dll!PresShell::Initialize(int aWidth=19200, int aHeight=28800) 
 51     xul.dll!nsContentSink::StartLayout(bool aIgnorePendingSheets=true) 
 52     xul.dll!nsHtml5TreeOpExecutor::FlushPendingNotifications(mozFlushType aType=Flush_Layout) 
 53     xul.dll!nsDocument::FlushPendingNotifications(mozFlushType aType=Flush_Layout) 
 54     xul.dll!nsDocument::FlushPendingNotifications(mozFlushType aType=Flush_Style) 
 55     xul.dll!nsDocLoader::DocLoaderIsEmpty(bool aFlushLayout=true) 
 56     xul.dll!nsDocLoader::OnStopRequest(nsIRequest * aRequest=0x0e439ed0, nsISupports * aCtxt=0x00000000, tag_nsresult aStatus=-2142568446) 
 57     xul.dll!nsLoadGroup::RemoveRequest(nsIRequest * request=0x0e439ed0, nsISupports * ctxt=0x00000000, tag_nsresult aStatus=-2142568446) 
 58     xul.dll!nsLoadGroup::Cancel(tag_nsresult status=-2142568446) 
 59     xul.dll!nsDocLoader::Stop() 
 60     xul.dll!nsDocShell::Stop() 
 61     xul.dll!nsDocShell::Stop(unsigned int aStopFlags=1) 
 62     xul.dll!nsDocShell::InternalLoad(nsIURI * aURI=0x0e4cc900, nsIURI * aReferrer=0x0d666840, nsISupports * aOwner=0x0d816240, unsigned int aFlags=0, const wchar_t * aWindowTarget=0x023f116e, const char * aTypeHint=0x00000000, nsIInputStream * aPostData=0x00000000, nsIInputStream * aHeadersData=0x00000000, unsigned int aLoadType=1, nsISHEntry * aSHEntry=0x00000000, bool aFirstParty=false, nsIDocShell * * aDocShell=0x00000000, nsIRequest * * aRequest=0x00000000) 
 63     xul.dll!nsDocShell::LoadURI(nsIURI * aURI=0x0e4cc900, nsIDocShellLoadInfo * aLoadInfo=0x0e4d05c0, unsigned int aLoadFlags=0, bool aFirstParty=false) 
 64     xul.dll!nsFrameLoader::ReallyStartLoadingInternal() 
 65     xul.dll!nsFrameLoader::ReallyStartLoading() 
 66     xul.dll!nsDocument::MaybeInitializeFinalizeFrameLoaders() 
 67     xul.dll!nsRunnableMethodImpl<void (__thiscall nsDocument::*)(void),1>::Run() 
 68     xul.dll!nsContentUtils::AddScriptRunner(nsIRunnable * aRunnable=0x0d83d160) 
 69     xul.dll!nsDocument::InitializeFrameLoader(nsFrameLoader * aLoader=0x0e7631f0) 
 70     xul.dll!nsFrameLoader::LoadURI(nsIURI * aURI=0x0e4cc900) 
 71     xul.dll!nsFrameLoader::LoadFrame() 
 72     xul.dll!nsGenericHTMLFrameElement::LoadSrc() 
 73     xul.dll!nsGenericHTMLFrameElement::SetAttr(int aNameSpaceID=0, nsIAtom * aName=0x071246a0, nsIAtom * aPrefix=0x00000000, const nsAString_internal & aValue={...}, bool aNotify=true) 
 74     xul.dll!nsGenericHTMLElement::SetAttr(int aNameSpaceID=0, nsIAtom * aName=0x071246a0, const nsAString_internal & aValue={...}, bool aNotify=true) 
 75     xul.dll!nsGenericHTMLElement::SetAttrHelper(nsIAtom * aAttr=0x071246a0, const nsAString_internal & aValue={...}) 
 76     xul.dll!nsHTMLIFrameElement::SetSrc(const nsAString_internal & aValue={...}) 
 77     xul.dll!nsIDOMHTMLIFrameElement_SetSrc(JSContext * cx=0x0d6af3a0, JS::Handle<JSObject *> obj={...}, JS::Handle<jsid> id={...}, int strict=1, JS::MutableHandle<JS::Value> vp_={...}) 
 78     mozjs.dll!js::CallJSPropertyOpSetter(JSContext * cx=0x0d6af3a0, int (JSContext *, JS::Handle<JSObject *>, JS::Handle<jsid>, int, JS::MutableHandle<JS::Value>)* op=0x1074fd80, JS::Handle<JSObject *> obj={...}, JS::Handle<jsid> id={...}, int strict=1, JS::MutableHandle<JS::Value> vp={...}) 
 79     mozjs.dll!js::Shape::set(JSContext * cx=0x0d6af3a0, JS::Handle<JSObject *> obj={...}, JS::Handle<JSObject *> receiver={...}, bool strict=true, JS::MutableHandle<JS::Value> vp={...}) 
 80     mozjs.dll!js::baseops::SetPropertyHelper(JSContext * cx=0x0d6af3a0, JS::Handle<JSObject *> obj={...}, JS::Handle<JSObject *> receiver={...}, JS::Handle<jsid> id={...}, unsigned int defineHow=1, JS::MutableHandle<JS::Value> vp={...}, int strict=1) 
 81     mozjs.dll!js::SetPropertyOperation(JSContext * cx=0x0d6af3a0, unsigned char * pc=0x0e67d5ac, JS::Handle<JS::Value> lval={...}, JS::Handle<JS::Value> rval={...}) 
 82     mozjs.dll!js::Interpret(JSContext * cx=0x0d6af3a0, js::StackFrame * entryFrame=0x07980020, js::InterpMode interpMode=JSINTERP_NORMAL) 
 83     mozjs.dll!js::RunScript(JSContext * cx=0x0d6af3a0, JS::Handle<JSScript *> script={...}, js::StackFrame * fp=0x07980020) 
 84     mozjs.dll!js::ExecuteKernel(JSContext * cx=0x0d6af3a0, JS::Handle<JSScript *> script={...}, JSObject & scopeChain={...}, const JS::Value & thisv={...}, js::ExecuteType type=EXECUTE_GLOBAL, js::StackFrame * evalInFrame=0x00000000, JS::Value * result=0x00000000) 
 85     mozjs.dll!js::Execute(JSContext * cx=0x0d6af3a0, JS::Handle<JSScript *> script={...}, JSObject & scopeChainArg={...}, JS::Value * rval=0x00000000) 
 86     mozjs.dll!JS::Evaluate(JSContext * cx=0x0d6af3a0, JS::Handle<JSObject *> obj={...}, JS::CompileOptions options={...}, const wchar_t * chars=0x0e4d8008, unsigned int length=2179, JS::Value * rval=0x00000000) 
 87     xul.dll!nsJSContext::EvaluateString(const nsAString_internal & aScript={...}, JSObject * aScopeObject=0x0842e040, nsIPrincipal * aPrincipal=0x0d816240, nsIPrincipal * aOriginPrincipal=0x0e4f4a00, const char * aURL=0x0e5420c8, unsigned int aLineNo=1, JSVersion aVersion=JSVERSION_DEFAULT, nsAString_internal * aRetValue=0x00000000, bool * aIsUndefined=0x0036d0f7) 
 88     xul.dll!nsScriptLoader::EvaluateScript(nsScriptLoadRequest * aRequest=0x0e542100, const nsString & aScript={...}) 
 89     xul.dll!nsScriptLoader::ProcessRequest(nsScriptLoadRequest * aRequest=0x0e542100) 
 90     xul.dll!nsScriptLoader::ProcessPendingRequests() 
 91     xul.dll!nsScriptLoader::OnStreamComplete(nsIStreamLoader * aLoader=0x0e5c6610, nsISupports * aContext=0x0e593980, tag_nsresult aStatus=-2142109678, unsigned int aStringLen=0, const unsigned char * aString=0x00000000) 
 92     xul.dll!nsStreamLoader::OnStopRequest(nsIRequest * request=0x0e5af4a0, nsISupports * ctxt=0x0e593980, tag_nsresult aStatus=-2142109678) 
 93     xul.dll!nsJARChannel::OnStopRequest(nsIRequest * req=0x0e58f460, nsISupports * ctx=0x00000000, tag_nsresult status=-2142109678) 
 94     xul.dll!nsInputStreamPump::OnStateStop() 
 95     xul.dll!nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream * stream=0x0e439300) 
 96     xul.dll!nsInputStreamReadyEvent::Run() 
 97     xul.dll!nsThread::ProcessNextEvent(bool mayWait=false, bool * result=0x0036d387) 
 98     xul.dll!NS_ProcessNextEvent_P(nsIThread * thread=0x0231f160, bool mayWait=false) 
 99     xul.dll!mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate * aDelegate=0x023380c0) 
 100    xul.dll!MessageLoop::RunInternal() 
 101    xul.dll!MessageLoop::RunHandler() 
 102    xul.dll!MessageLoop::Run() 
 103    xul.dll!nsBaseAppShell::Run() 
 104    xul.dll!nsAppShell::Run() 
 105    xul.dll!nsAppStartup::Run() 
 106    xul.dll!XREMain::XRE_mainRun() 
 107    xul.dll!XREMain::XRE_main(int argc=3, char * * argv=0x01e97cc0, const nsXREAppData * aAppData=0x001cc7e4) 
 108    xul.dll!XRE_main(int argc=3, char * * argv=0x01e97cc0, const nsXREAppData * aAppData=0x001cc7e4, unsigned int aFlags=0) 
 109    b2g.exe!do_main(int argc=3, char * * argv=0x01e97cc0) 
 110    b2g.exe!NS_internal_main(int argc=3, char * * argv=0x01e97cc0) 
 111    b2g.exe!wmain(int argc=3, wchar_t * * argv=0x01e91ad0) 
 112    b2g.exe!__tmainCRTStartup() 
 113    b2g.exe!wmainCRTStartup() 
 114    kernel32.dll!@BaseThreadInitThunk@12() 
 115    ntdll.dll!___RtlUserThreadStart@8() 
 116    ntdll.dll!__RtlUserThreadStart@8()