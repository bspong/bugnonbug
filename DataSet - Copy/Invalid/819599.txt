~nsEventQueue() destroys condition variable on which other threads are blocked.
I am reporting here that ~nsEventQueue() destroys condition variable being waited upon, i.e., on which other thread(s) blocked.

Background:
I am investigating the problems which seem to be caused by
thread races (hard to reproduce, but happens once in a while).

Bug 814438 Invalid Read of 4 bytes through bogus pointer in nssCertificate_Destroy 

Bug 819386 - Intermittent Android shutdown crash [@ nss_certificate_hash] 

Even on x86 linux, I saw FF crashes when I tried to close it, and also
I experienced TB crashes a few times, too in the last several weeks. I
do not care if FF crashes now and then since my operation of FF is
almost always idempotent. I can repeat the operation later to obtain
the same result most of the time (except for web shopping).  But with
TB, each major operation such as downloading and writing e-mails
cannot be repeated most of the time. Thus, a crash in TB is worth 1000
crashes in FF for me!

So I ran TB under helgrind and run "make mozmill" test to see if there
are thread-related issues.  I found a few.

The report:

~nsEventQueue() destroys condition variable being waited upon, i.e., on which other thread(s) blocked.

This is bad. According to POSIX, anything goes after the destruction in terms of thread safety.
E.g.
http://pubs.opengroup.org/onlinepubs/009695399/functions/pthread_cond_init.html
> Attempting to destroy a condition variable upon which other threads
> are currently blocked results in undefined behavior.

To wit, the following are a few warnings from helgrind run.

Do not think that some of them are in shutdown sequence and can be ignored. 

The following bug, 
Bug 819386 - Intermittent Android shutdown crash [@ nss_certificate_hash], 
happens exactly during shutdown sequence, it seems.

[Now, it is possible that nsEventQueue is implemented to be lock-free and
not valgrind-friendly as is. 
Bug 500308 - Implement a thread-safe lock-free queue (edit) 
Bug 756276 - Add a thread safe queue and port nsEventQueue as well as MediaQueue to use it
If this is the case, I wonder if someone can annotate the source code to
let helgrind know this is OK? 
No, no, no. Come to think of it, even if queue is lockless, it is NOT
OK at all to destroy condition variable on which other threads are
waiting!]

Logs:

==32661== ----------------------------------------------------------------
==32661==
==32661== Thread #4: pthread_cond_destroy: destruction of condition variable being waited upon
==32661==    at 0x4027A7F: pthread_cond_destroy_WRK (hg_intercepts.c:940)
==32661==    by 0x4029781: pthread_cond_destroy@* (hg_intercepts.c:958)
==32661==    by 0x47193BA: PR_DestroyCondVar (ptsynch.c:372)
==32661==    by 0x4719B06: PR_DestroyMonitor (ptsynch.c:551)
==32661==    by 0x60826BC: nsEventQueue::~nsEventQueue() (ReentrantMonitor.h:59)
==32661==    by 0x6086203: nsThreadPool::~nsThreadPool() (nsThreadPool.cpp:57)
==32661==    by 0x6086302: nsThreadPool::Release() (nsThreadPool.cpp:41)
==32661==    by 0x59570E1: mozilla::psm::StopSSLServerCertVerificationThreads() (SSLServerCertVerification.cpp:179)
==32661==    by 0xD5E25003: ???
==32661==


The next one is similar to above.

==1345== ----------------------------------------------------------------
==1345==
==1345== Thread #4: pthread_cond_destroy: destruction of condition variable being waited upon
==1345==    at 0x4027A7F: pthread_cond_destroy_WRK (hg_intercepts.c:940)
==1345==    by 0x4029781: pthread_cond_destroy@* (hg_intercepts.c:958)
==1345==    by 0x47193BA: PR_DestroyCondVar (ptsynch.c:372)
==1345==    by 0x4719B06: PR_DestroyMonitor (ptsynch.c:551)
==1345==    by 0x60826BC: nsEventQueue::~nsEventQueue() (ReentrantMonitor.h:59)
==1345==    by 0x6086203: nsThreadPool::~nsThreadPool() (nsThreadPool.cpp:57)
==1345==    by 0x6086302: nsThreadPool::Release() (nsThreadPool.cpp:41)
==1345==    by 0x59570E1: mozilla::psm::StopSSLServerCertVerificationThreads() (SSLServerCertVerification.cpp:179)
==1345==    by 0xD5E25003: ???
==1345==



Ditto:
==1597== ----------------------------------------------------------------
==1597==
==1597== Thread #4: pthread_cond_destroy: destruction of condition variable being waited upon
==1597==    at 0x4027A7F: pthread_cond_destroy_WRK (hg_intercepts.c:940)
==1597==    by 0x4029781: pthread_cond_destroy@* (hg_intercepts.c:958)
==1597==    by 0x47193BA: PR_DestroyCondVar (ptsynch.c:372)
==1597==    by 0x4719B06: PR_DestroyMonitor (ptsynch.c:551)
==1597==    by 0x60826BC: nsEventQueue::~nsEventQueue() (ReentrantMonitor.h:59)
==1597==    by 0x6086203: nsThreadPool::~nsThreadPool() (nsThreadPool.cpp:57)
==1597==    by 0x6086302: nsThreadPool::Release() (nsThreadPool.cpp:41)
==1597==    by 0x59570E1: mozilla::psm::StopSSLServerCertVerificationThreads() (SSLServerCertVerification.cpp:179)
==1597==    by 0xD5E25003: ???
==1597==

From different context.

==1980== ----------------------------------------------------------------
==1980==
==1980== Thread #1: pthread_cond_destroy: destruction of condition variable being waited upon
==1980==    at 0x4027A7F: pthread_cond_destroy_WRK (hg_intercepts.c:940)
==1980==    by 0x4029781: pthread_cond_destroy@* (hg_intercepts.c:958)
==1980==    by 0x47193BA: PR_DestroyCondVar (ptsynch.c:372)
==1980==    by 0x4719B06: PR_DestroyMonitor (ptsynch.c:551)
==1980==    by 0x60826BC: nsEventQueue::~nsEventQueue() (ReentrantMonitor.h:59)
==1980==    by 0x6086203: nsThreadPool::~nsThreadPool() (nsThreadPool.cpp:57)
==1980==    by 0x6086302: nsThreadPool::Release() (nsThreadPool.cpp:41)
==1980==    by 0x603EFCA: nsCOMPtr_base::assign_with_AddRef(nsISupports*) (nsCOMPtr.h:442)
==1980==    by 0x4C657C5: nsStreamTransportService::Observe(nsISupports*, char const*, unsigned short const*) (nsCOMPtr.h:624)
==1980==    by 0x60571C2: nsObserverList::NotifyObservers(nsISupports*, char const*, unsigned short const*) (nsObserverList.cpp:99)
==1980==    by 0x6057735: nsObserverService::NotifyObservers(nsISupports*, char const*, unsigned short const*) (nsObserverService.cpp:161)
==1980==    by 0x6048F12: mozilla::ShutdownXPCOM(nsIServiceManager*) (nsXPComInit.cpp:562)
==1980==


The following is probably the same as above.
==2070== ----------------------------------------------------------------
==2070==
==2070== Thread #1: pthread_cond_destroy: destruction of condition variable being waited upon
==2070==    at 0x4027A7F: pthread_cond_destroy_WRK (hg_intercepts.c:940)
==2070==    by 0x4029781: pthread_cond_destroy@* (hg_intercepts.c:958)
==2070==    by 0x47193BA: PR_DestroyCondVar (ptsynch.c:372)
==2070==    by 0x4719B06: PR_DestroyMonitor (ptsynch.c:551)
==2070==    by 0x60826BC: nsEventQueue::~nsEventQueue() (ReentrantMonitor.h:59)
==2070==    by 0x6086203: nsThreadPool::~nsThreadPool() (nsThreadPool.cpp:57)
==2070==    by 0x6086302: nsThreadPool::Release() (nsThreadPool.cpp:41)
==2070==    by 0x603EFCA: nsCOMPtr_base::assign_with_AddRef(nsISupports*) (nsCOMPtr.h:442)
==2070==    by 0x4C657C5: nsStreamTransportService::Observe(nsISupports*, char const*, unsigned short const*) (nsCOMPtr.h:624)
==2070==    by 0x60571C2: nsObserverList::NotifyObservers(nsISupports*, char const*, unsigned short const*) (nsObserverList.cpp:99)
==2070==    by 0x6057735: nsObserverService::NotifyObservers(nsISupports*, char const*, unsigned short const*) (nsObserverService.cpp:161)
==2070==    by 0x6048F12: mozilla::ShutdownXPCOM(nsIServiceManager*) (nsXPComInit.cpp:562)
==2070==

Same context as the first two :
==2466== ----------------------------------------------------------------
==2466==
==2466== Thread #4: pthread_cond_destroy: destruction of condition variable being waited upon
==2466==    at 0x4027A7F: pthread_cond_destroy_WRK (hg_intercepts.c:940)
==2466==    by 0x4029781: pthread_cond_destroy@* (hg_intercepts.c:958)
==2466==    by 0x47193BA: PR_DestroyCondVar (ptsynch.c:372)
==2466==    by 0x4719B06: PR_DestroyMonitor (ptsynch.c:551)
==2466==    by 0x60826BC: nsEventQueue::~nsEventQueue() (ReentrantMonitor.h:59)
==2466==    by 0x6086203: nsThreadPool::~nsThreadPool() (nsThreadPool.cpp:57)
==2466==    by 0x6086302: nsThreadPool::Release() (nsThreadPool.cpp:41)
==2466==    by 0x59570E1: mozilla::psm::StopSSLServerCertVerificationThreads() (SSLServerCertVerification.cpp:179)
==2466==    by 0xD5E25003: ???
==2466==

------------------------
versions (comm-central)
-----------------------
cd /home/ishikawa/TB-NEW/TB-3HG/new-src
hg identify
99fd4744910d+ tip

-----------------------
mozilla subdirectory
-----------------------
cd /home/ishikawa/TB-NEW/TB-3HG/new-src/mozilla
hg identify
3b71d63eafd5+ tip


I am playing with a few patches discussed in

Bug 814438 Invalid Read of 4 bytes through bogus pointer in nssCertificate_Destroy 


PS: I wonder if this is related to

Bug 803983 - Thunderbird hangs on shutdown: have to use "Force Quit" to complete shutdown. 
Bug 729536 - Deadlock by xul!nsHttpConnectionMgr::Shutdown

A Lot of things seem to go wrong at shutdown time.

PPS: It may be the culprit is PR_DestroyMonitor().