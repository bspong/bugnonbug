Cannot pas an array of nsiDomWindows between j module
Created attachment 8542503
bugreport.xpi

I'm writing a bootstrap firefox extension. Using firefox developer edition v36.2a

I have two problem that seem related, which I don't understand. The first one, mere annoyance:

my bootstrap Console.utils.imports a j file which load my application (creates a namespace object and import all other j file a property on the namespace. All other file include this same namespace file and thus have access to each other. They even store state and everything work much similar to how nodejs cache modules, eg it seems there is only one object of every class which is shared throughout the whole application. So far, So good, Now, this happens:

my namespace file does:

namespace.console = Components.utils.import( 'you know the one/console.jsm' )
namespace.Services = Components.utils.import( 'you know the one/Services.jsm')
namespace.Cu = Components.utils

Now in another file that import this file, I get the namespace object, but namespace.Cu will be undefined. console.log( namespace ) is fine however and show me Cu, that I can expand and see all it property and so on... All other thing (console, Services, my own classes) are fine, but trying Cc, Ci etc from Components -> undefined.

In another place in my app I have a function (in file A) which return an array of nsiDomWindows. A function in file B call it and when it arrives, similar story: in console all look fine, Array with ChromeWidows that I can look at. But it's no longer an array actually and is of type object and array[ 0 ] is undefined. If I put both class in the same file they're fine.

For further confusion, I think I have already used this method in another file and all wa fine:

// A.js
//
function A()
{
b = new B()
c = new C()

let window = b.windowList () // work fine, yield an actual valid array
// with valid window inside
c.doSomething() // broken, see below
c.doSomething( window ) // passing it a a parameter
// doesn't help, still broken
}

// B.js
//
function B()
{
this.windowList = function windowList()
{
let result = []

// get open window from nsiWindowMediator
// foreach...
//
result.push( nsiDomWindow )

console.log( typeof result ) // Array -> it's completely valid here

return result
}
}


// C.js
//
function C()
{
this.b = new B()


this.doSomething = function doSomething( window )
{
if( ! window )

window = this.windowList()


console.log( window ) // in the console shows:
// Array[ ChromeWindow -> about:home ]
// I can inspect all it's properties, look ok

console.log( typeof window ) // object
console.log( windows.constructor.name ) // undefined

console.log( windows[ 0 ] ) // undefined

// looping over the object property show that it doe
// have 1 property called '0' which point at undefined
// note: there wa only one open window in the array.
}
}

// Note: the order in which I use Components.utils.import on these is B, C, A

I also wondered if this had todo with security measure in gecko, but no wrapper object are to be seen anywhere, and afaik they should only shield content code from chrome code (this is all chrome code).

It's the kind of bug that frustrates me, because I can't think of one sensible reason why the return value of a function shouldn't be the same thing on two side of the call.

Lucky enough there is a workaround, I will have my make file concatenate all my j file and be done with Components.utils once and for all. Seems the le of the mozilla API I have to use, the happier and more productive I'll be.

I'm seeing error from mozilla code a well. I just had an error saying "shouldLog is not a function" in Console.jsm. This function is clearly defined higher up in that file. The line that throw the error is an anonymous function that is being returned. That should inherit the scope without a doubt, but it doesn't. It might be that something is mangling return value and that this is related.

I attached a little addon that demonstrates the first problem (Cu being undefined). You will see the object in the console to inspect them. It doe this twice, once from bootstrap.js and once from Core.js. From bootstrap.js it works, from Core.js not. Note that if you look at the object Bugreport console will show you that all it's property are on there like they should.

There's a corresponding question on Stack Overflow: https://stackoverflow.com/questions/27690829/weird-gecko-behaviour-trying-to-pass-an-array-of-nsidomwindows-between-js-modul
