Assertion failure: JS_ASSERT(actual->isSubset(frozen))
From my local build:

JS_ASSERT(actual->isSubset(frozen));

I got this by searching for "test" in the search box with Wikipedia set a the search engine + my patch in bug 958877 to have it use HTTPS. My build wa done using VS2013 with the patch from bug 918164 and bug 892859 applied. Platform is Windows 8.1 x64.

Stack trace:

> mozjs.dll!CheckDefinitePropertiesTypeSet(JSContext * cx, js::types::TemporaryTypeSet * frozen, js::types::StackTypeSet * actual) Line 1044 C++
mozjs.dll!js::types::FinishDefinitePropertiesAnalysis(JSContext * cx, js::types::CompilerConstraintList * constraints) Line 1067 C++
mozjs.dll!js::jit::AnalyzeNewScriptProperties(JSContext * cx, JSFunction * fun, js::types::TypeObject * type, JS::Handle<JSObject *> baseobj, js::Vector<js::types::TypeNewScript::Initializer,0,js::TempAllocPolicy> * initializerList) Line 2195 C++
mozjs.dll!CheckNewScriptProperties(JSContext * cx, js::types::TypeObject * type, JSFunction * fun) Line 3433 C++
mozjs.dll!js::ExclusiveContext::getNewType(const js::Class * clasp, js::TaggedProto proto, JSFunction * fun) Line 4016 C++
mozjs.dll!js::CreateThisForFunctionWithProto(JSContext * cx, JS::Handle<JSObject *> callee, JSObject * proto, js::NewObjectKind newKind) Line 1557 C++
mozjs.dll!js::CreateThisForFunction(JSContext * cx, JS::Handle<JSObject *> callee, js::NewObjectKind newKind) Line 1587 C++
mozjs.dll!js::jit::CanEnter(JSContext * cx, js::RunState & state) Line 2082 C++
mozjs.dll!Interpret(JSContext * cx, js::RunState & state) Line 2628 C++
mozjs.dll!js::RunScript(JSContext * cx, js::RunState & state) Line 420 C++
mozjs.dll!js::Invoke(JSContext * cx, JS::CallArgs args, js::MaybeConstruct construct) Line 482 C++
mozjs.dll!js_fun_apply(JSContext * cx, unsigned int argc, JS::Value * vp) Line 1043 C++
mozjs.dll!js::CallJSNative(JSContext * cx, bool (JSContext *, unsigned int, JS::Value *) * native, const JS::CallArgs & args) Line 220 C++
mozjs.dll!js::Invoke(JSContext * cx, JS::CallArgs args, js::MaybeConstruct construct) Line 463 C++
mozjs.dll!Interpret(JSContext * cx, js::RunState & state) Line 2607 C++
mozjs.dll!js::RunScript(JSContext * cx, js::RunState & state) Line 420 C++
mozjs.dll!js::Invoke(JSContext * cx, JS::CallArgs args, js::MaybeConstruct construct) Line 482 C++
mozjs.dll!js::Invoke(JSContext * cx, const JS::Value & thisv, const JS::Value & fval, unsigned int argc, JS::Value * argv, JS::MutableHandle<JS::Value> rval) Line 519 C++
mozjs.dll!js::DirectProxyHandler::call(JSContext * cx, JS::Handle<JSObject *> proxy, const JS::CallArgs & args) Line 463 C++
mozjs.dll!js::CrossCompartmentWrapper::call(JSContext * cx, JS::Handle<JSObject *> wrapper, const JS::CallArgs & args) Line 463 C++
mozjs.dll!js::Proxy::call(JSContext * cx, JS::Handle<JSObject *> proxy, const JS::CallArgs & args) Line 2634 C++
mozjs.dll!proxy_Call(JSContext * cx, unsigned int argc, JS::Value * vp) Line 3062 C++
mozjs.dll!js::CallJSNative(JSContext * cx, bool (JSContext *, unsigned int, JS::Value *) * native, const JS::CallArgs & args) Line 220 C++
mozjs.dll!js::Invoke(JSContext * cx, JS::CallArgs args, js::MaybeConstruct construct) Line 456 C++
mozjs.dll!js::Invoke(JSContext * cx, const JS::Value & thisv, const JS::Value & fval, unsigned int argc, JS::Value * argv, JS::MutableHandle<JS::Value> rval) Line 519 C++
mozjs.dll!JS_CallFunctionValue(JSContext * cx, JSObject * objArg, JS::Value fval, unsigned int argc, JS::Value * argv, JS::Value * rval) Line 5000 C++
xul.dll!mozilla::dom::Function::Call(JSContext * cx, JS::Handle<JSObject *> aThisObj, const nsTArray<JS::Value> & arguments, mozilla::ErrorResult & aRv) Line 35 C++
xul.dll!mozilla::dom::Function::Call<nsCOMPtr<nsISupports> >(const nsCOMPtr<nsISupports> & thisObj, const nsTArray<JS::Value> & arguments, mozilla::ErrorResult & aRv, mozilla::dom::CallbackObject::ExceptionHandling aExceptionHandling) Line 55 C++
xul.dll!nsGlobalWindow::RunTimeoutHandler(nsTimeout * aTimeout, nsIScriptContext * aScx) Line 11697 C++
xul.dll!nsGlobalWindow::RunTimeout(nsTimeout * aTimeout) Line 11920 C++
xul.dll!nsGlobalWindow::TimerCallback(nsITimer * aTimer, void * aClosure) Line 12167 C++
xul.dll!nsTimerImpl::Fire() Line 551 C++
xul.dll!nsTimerEvent::Run() Line 637 C++
xul.dll!nsThread::ProcessNextEvent(bool mayWait, bool * result) Line 634 C++
xul.dll!NS_ProcessNextEvent(nsIThread * thread, bool mayWait) Line 263 C++
xul.dll!mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate * aDelegate) Line 95 C++
xul.dll!MessageLoop::RunInternal() Line 227 C++
xul.dll!MessageLoop::RunHandler() Line 220 C++
xul.dll!MessageLoop::Run() Line 194 C++
xul.dll!nsBaseAppShell::Run() Line 163 C++
xul.dll!nsAppShell::Run() Line 113 C++
xul.dll!nsAppStartup::Run() Line 276 C++
xul.dll!XREMain::XRE_mainRun() Line 4023 C++
xul.dll!XREMain::XRE_main(int argc, char * * argv, const nsXREAppData * aAppData) Line 4091 C++
xul.dll!XRE_main(int argc, char * * argv, const nsXREAppData * aAppData, unsigned int aFlags) Line 4331 C++
firefox.exe!do_main(int argc, char * * argv, nsIFile * xreDirectory) Line 280 C++
firefox.exe!NS_internal_main(int argc, char * * argv) Line 648 C++
firefox.exe!wmain(int argc, wchar_t * * argv) Line 105 C++
[External Code]
[Frames below may be incorrect and/or missing, no symbol loaded for kernel32.dll]
