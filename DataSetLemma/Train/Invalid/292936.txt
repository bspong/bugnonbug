Crash debugging XUL App from remote session
Ok, this is kind of weird on how to reproduce...

0. Don't set MOZ_NO_REMOTE
1. Install Spider <http://bclary.com/2004/07/10/mozilla-spiders>
2. Run a chrome app firefox -chrome chrome://spider/content
3. Start firefox again so that the XUL app is running and a separate window is
running Firefox.
4. Open Venkman
5. Run Spider with a user hook script (see the Spider page) which contains a
line with the keyword debugger;
6. Crash

This code ha a line with debugger; followed by a function call which call
dump, I might be able to reduce this.

_output(_iobuf * 0x10261848, const char * 0x030a8238, char * 0x0012cf48) line
677 + 31 byte
printf(const char * 0x030a7dd8) line 60 + 18 byte
xpc_DumpJSStack(JSContext * 0x02ae9060, int 1, int 1, int 0) line 295 + 10 byte
xpc_DebuggerKeywordHandler(JSContext * 0x02ae9060, JSScript * 0x02eb4218,
unsigned char * 0x02eb4257, long * 0x0012d7f0, void * 0x00000000) line 369 + 15
byte
js_Interpret(JSContext * 0x02ae9060, unsigned char * 0x02eb4257, long *
0x0012d9a0) line 5026 + 38 byte
js_Invoke(JSContext * 0x02ae9060, unsigned int 0, unsigned int 0) line 1340 + 19
byte
js_Interpret(JSContext * 0x02ae9060, unsigned char * 0x0250880f, long *
0x0012e404) line 3610 + 15 byte
js_Invoke(JSContext * 0x02ae9060, unsigned int 1, unsigned int 2) line 1340 + 19
byte
nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJSClass * const 0x024f9bb0,
nsXPCWrappedJS * 0x024f9c40, unsigned short 3, const nsXPTMethodInfo *
0x029a53e8, nsXPTCMiniVariant * 0x0012e754) line 1339 + 22 byte
nsXPCWrappedJS::CallMethod(nsXPCWrappedJS * const 0x024f9c40, unsigned short 3,
const nsXPTMethodInfo * 0x029a53e8, nsXPTCMiniVariant * 0x0012e754) line 450
PrepareAndDispatch(nsXPTCStubBase * 0x024f9c40, unsigned int 3, unsigned int *
0x0012e804, unsigned int * 0x0012e7f4) line 117 + 31 byte
SharedStub() line 147
nsEventListenerManager::HandleEventSubType(nsListenerStruct * 0x024f9d68,
nsIDOMEvent * 0x02521ae8, nsIDOMEventTarget * 0x02f59170, unsigned int 1,
unsigned int 4) line 1563 + 20 byte
nsEventListenerManager::HandleEvent(nsEventListenerManager * const 0x024f9ca8,
nsPresContext * 0x02ee5960, nsEvent * 0x0012ee0c, nsIDOMEvent * * 0x0012ed7c,
nsIDOMEventTarget * 0x02f59170, unsigned int 4, nsEventStatus * 0x0012ee34) line
1667
nsXULElement::HandleDOMEvent(nsPresContext * 0x02ee5960, nsEvent * 0x0012ee0c,
nsIDOMEvent * * 0x0012ed7c, unsigned int 4, nsEventStatus * 0x0012ee34) line 2194
nsXULElement::HandleChromeEvent(nsXULElement * const 0x02efdd6c, nsPresContext *
0x02ee5960, nsEvent * 0x0012ee0c, nsIDOMEvent * * 0x0012ed7c, unsigned int 4,
nsEventStatus * 0x0012ee34) line 2869 + 35 byte
nsGlobalWindow::HandleDOMEvent(nsPresContext * 0x02ee5960, nsEvent * 0x0012ee0c,
nsIDOMEvent * * 0x0012ed7c, unsigned int 7, nsEventStatus * 0x0012ee34) line 898
DocumentViewerImpl::LoadComplete(DocumentViewerImpl * const 0x02f81270, unsigned
int 0) line 987 + 35 byte
nsDocShell::EndPageLoad(nsIWebProgress * 0x02f6b084, nsIChannel * 0x024fa210,
unsigned int 0) line 4561
nsWebShell::EndPageLoad(nsIWebProgress * 0x02f6b084, nsIChannel * 0x024fa210,
unsigned int 0) line 665
nsDocShell::OnStateChange(nsDocShell * const 0x02f6b138, nsIWebProgress *
0x02f6b084, nsIRequest * 0x024fa210, unsigned int 131088, unsigned int 0) line 4487
nsDocLoader::FireOnStateChange(nsIWebProgress * 0x02f6b084, nsIRequest *
0x024fa210, int 131088, unsigned int 0) line 1195
nsDocLoader::doStopDocumentLoad(nsIRequest * 0x024fa210, unsigned int 0) line 832
nsDocLoader::DocLoaderIsEmpty() line 729
nsDocLoader::OnStopRequest(nsIRequest * 0x0304d358, nsISupports * 0x00000000,
unsigned int 0) line 653
nsLoadGroup::RemoveRequest(nsLoadGroup * const 0x02ef6518, nsIRequest *
0x0304d358, nsISupports * 0x00000000, unsigned int 0) line 732 + 44 byte
PresShell::RemoveDummyLayoutRequest() line 6934 + 42 byte
DummyLayoutRequestEvent::HandleEvent() line 6834
HandleDummyLayoutRequestPLEvent(PLEvent * 0x03020598) line 6843
PL_HandleEvent(PLEvent * 0x03020598) line 698 + 10 byte
PL_ProcessPendingEvents(PLEventQueue * 0x024a1da0) line 633 + 9 byte
_md_EventReceiverProc(HWND__ * 0x003d01fe, unsigned int 49395, unsigned int 0,
long 38411680) line 1435 + 9 byte
USER32! 77d48734()
USER32! 77d48816()
USER32! 77d489cd()
USER32! 77d48a10()
nsAppShell::Run(nsAppShell * const 0x025330a0) line 135
nsAppStartup::Run(nsAppStartup * const 0x02533000) line 145
XRE_main(int 5, char * * 0x01a47030, const nsXREAppData * 0x011f101c kAppData)
line 2012 + 35 byte
main(int 5, char * * 0x01a47030) line 60 + 18 byte
mainCRTStartup() line 338 + 17 byte
KERNEL32! 7c816d4f()

in c runtime output.c

while (i-- && *p)

local var

i 2147483646
+ pwch 0x00000000 ""
+ p 0x00000001 ""
+ stream 0x10261848
+ format 0x030a8238 "vg%2Bxml&autorun=true"
this = [object Object]
5 anonymous(evt = [object Event @ 0x304be08])
["chrome://spider/content/spider.js":638]
this = [object XULElement @ 0x2f6c0d0]
6 [native frame]
"
+ argptr 0x0012cf48 ""
fldwidth 2
+ prefix 0x0012ccb8 ""
no_output 0
radix 16
precision -1
hexadd 39
charsout 1117
+ buffer {...}
ch 115 's'
textlen 1
+ text {...}
bufferiswide 0
state 7
wchar 29957
prefixlen 0
chclass 8
capexp 0
flag 0
