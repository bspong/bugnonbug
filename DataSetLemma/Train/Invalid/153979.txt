[msvc6] crash in opt profile build [@js_DecompileFunction]
viewer's crash: [stack is identical in winembed]
js_DecompileFunction(JSPrinter * 0x00000000, JSFunction * 0x00b6cd30) line 2383
+ 24 byte
JS_DecompileFunction(JSContext * 0x01bb8338, JSFunction * 0x00b6cd30, unsigned
int 0) line 3242 + 10 byte
fun_toString_sub(JSContext * 0x01bb8338, JSObject * 0x01b6a588, unsigned long
0, unsigned int 0, long * 0x01bcdc78, long * 0x0012f220) line 1394 + 10 byte
fun_toString(JSContext * 0x01bb8338, JSObject * 0x01b6a588, unsigned int 0,
long * 0x01bcdc78, long * 0x0012f220) line 1404 + 22 byte
js_Invoke(JSContext * 0x00000001, unsigned int 0, unsigned int 2) line 848 + 17
byte
js_InternalInvoke(JSContext * 0x01bb8360, JSObject * 0x01b6a588, long 28746776,
unsigned int 0, unsigned int 0, long * 0x00000000, long * 0x0012f368) line 940
+ 13 byte
js_TryMethod(JSContext * 0x01b6a418, JSObject * 0x01b6a588, JSAtom *
0x00abeae8, unsigned int 0, long * 0x00000000, long * 0x0012f368) line 3356 +
21 byte
js_DefaultValue(JSContext * 0x01bb8338, JSObject * 0x01b6a588, int 3, long *
0x0012f384) line 2869 + 24 byte
js_ValueToString(JSContext * 0x01bb8338, long 28747144) line 2569 + 16 byte
nsJSContext::EvaluateString(nsJSContext * const 0x00000000, const nsAString &
{...}, void * 0x01b6a3f0, nsIPrincipal * 0x01bc48d4, const char * 0x0012f4a8,
unsigned int 38, const char * 0x00328284 `string', nsAString & {...}, int *
0x0012f4e8) line 714 + 12 byte
nsScriptLoader::EvaluateScript(nsScriptLoader * const 0x00000008,
nsScriptLoadRequest * 0x01bcd7b8, const nsAFlatString & {...}) line 570
nsScriptLoader::ProcessRequest(nsScriptLoader * const 0x00000008,
nsScriptLoadRequest * 0x01bcd7b8) line 477 + 9 byte
nsScriptLoader::ProcessScriptElement(nsScriptLoader * const 0x01ba9168,
nsIDOMHTMLScriptElement * 0x01ba91ac, nsIScriptLoaderObserver * 0x01bc7db4)
line 420 + 12 byte
nsHTMLScriptElement::SetDocument(nsHTMLScriptElement * const 0x01bc7d88,
nsIDocument * 0x01ba5e30, int 0, int 29004136) line 158
nsGenericContainerElement::AppendChildTo(nsGenericContainerElement * const
0x01bc1a78, nsIContent * 0x01bc7d88, int 0, int 0) line 3726
HTMLContentSink::ProcessSCRIPTTag(HTMLContentSink * const 0x00000008, const
nsIParserNode & {...}) line 4959
HTMLContentSink::AddLeaf(HTMLContentSink * const 0x01bad998, const
nsIParserNode & {...}) line 3262
CNavDTD::AddLeaf(CNavDTD * const 0x00000008, const nsIParserNode * 0x01bc8318)
line 3804 + 13 byte
CNavDTD::AddHeadLeaf(CNavDTD * const 0x00000008, nsIParserNode * 0x01bc8318)
line 3867 + 8 byte
CNavDTD::HandleStartToken(CNavDTD * const 0x00000008, CToken * 0x00000053) line
1750 + 10 byte
CNavDTD::HandleToken(CNavDTD * const 0x00b6ceb8, CToken * 0x00000053, nsIParser
* 0x01ad4348) line 908 + 8 byte
CNavDTD::BuildModel(CNavDTD * const 0x00b6ceb8, nsIParser * 0x01ad4348,
nsITokenizer * 0x01bc5a58, nsITokenObserver * 0x00000000, nsIContentSink *
0x01bad998) line 519 + 10 byte
nsParser::BuildModel(nsParser * const 0x00000008) line 1875
nsParser::ResumeParse(nsParser * const 0x00000008, int 1, int 0, int 1) line
1737 + 7 byte
nsParser::OnDataAvailable(nsParser * const 0x000007cc, nsIRequest * 0x01bbbdc0,
nsISupports * 0x00000000, nsIInputStream * 0x01bc5ab0, unsigned int 0, unsigned
int 1996) line 2371 + 13 byte
nsDocumentOpenInfo::OnDataAvailable(nsDocumentOpenInfo * const 0x01bbc300,
nsIRequest * 0x01bbbdc0, nsISupports * 0x00000000, nsIInputStream * 0x01bc5ab0,
unsigned int 0, unsigned int 1996) line 245
nsStreamListenerTee::OnDataAvailable(nsStreamListenerTee * const 0x01bc5ab0,
nsIRequest * 0x01bbbdc0, nsISupports * 0x00000000, nsIInputStream * 0x00000000,
unsigned int 0, unsigned int 1996) line 97 + 24 byte
nsHttpChannel::OnDataAvailable(nsHttpChannel * const 0x01bbbdc4, nsIRequest *
0x01bbc5a4, nsISupports * 0x00000000, nsIInputStream * 0x01bbc534, unsigned int
0, unsigned int 1996) line 2983
nsOnDataAvailableEvent::HandleEvent(nsOnDataAvailableEvent * const 0x00000008)
line 193 + 24 byte
PL_HandleEvent(PLEvent * 0x01ba4864) line 597
PL_ProcessPendingEvents(PLEventQueue * 0x00263527) line 526 + 6 byte
_md_EventReceiverProc(HWND__ * 0x77f82bea, unsigned int 2147348480, unsigned
int 4279001, long 1) line 1078
main(int 1, char * * 0x00432ed8) line 158 + 7 byte
VIEWER! mainCRTStartup + 227 byte
KERNEL32! 77e8d326()

for (i = 0; i < nargs; i++)
=> js_printf(jp, (i > 0 ? ", %s" : "%s"), ATOM_BYTES(params[i]));

i 0
+ jp 0x00000000 <= problem
nargs 1

Ok. more detailed information
1. this doe reproduce if you save the file to disk
--15:16:34-- http://209.203.174.9:80/pink/index2.php?aid=228819&p=
=> `index2.php@aid=228819&p='
2. the printer is being called for a function named "click" on line 44 of the
file.
3. this doesn't happen in a debug build
4. it look like yet another bad optimization by msvc6
here's the limited bit of asm
2382: for (i = 0; i < nargs; i++)
0030C3A5 and dword ptr [jp],0
0030C3A9 cmp dword ptr [nargs],0
0030C3AD jbe js_DecompileFunction+16Dh (0030c3ea)
2383: js_printf(jp, (i > 0 ? ", %s" : "%s"),
ATOM_BYTES(params[i]));

jp wa fine until that loop started to execute
once it starts, i think js_printf is guaranteed to die, i'm not certain and
there's a storm coming, so here's the bug. -- i really should power down and
setup my ups.
