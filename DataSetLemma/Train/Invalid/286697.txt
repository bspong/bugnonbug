sharedprefhandler need to know when to give up
NS_WARN_IF_FALSE(NS_SUCCEEDED(rv), "Factory creation failed");
ntdll.dll!_DbgBreakPoint@0()
xpcom_core.dll!nsDebugImpl::Break(const char * aFile=0x00ed5df0, int
aLine=0x000000a0) Line 385 C++
xpcom_core.dll!nsDebugImpl::Assertion(const char * aStr=0x00ed5e3c, const char
* aExpr=0x00ed5e28, const char * aFile=0x00ed5df0, int aLine=0x000000a0) Line
301 C++
xpcom_core.dll!nsDebug::Assertion(const char * aStr=0x00ed5e3c, const char *
aExpr=0x00ed5e28, const char * aFile=0x00ed5df0, int aLine=0x000000a0) Line 109 C++
xpcom_core.dll!nsNativeComponentLoader::GetFactory(const nsID & aCID={...},
const char * aLocation=0x010f9258, const char * aType=0x010b7268, nsIFactory * *
_retval=0x0012dfa0) Line 160 + 0x23 C++
xpcom_core.dll!nsFactoryEntry::GetFactory(nsIFactory * * aFactory=0x0012dfa0,
nsComponentManagerImpl * mgr=0x003ff9b8) Line 302 + 0x3a C++
xpcom_core.dll!nsComponentManagerImpl::CreateInstanceByContractID(const char *
aContractID=0x013bc4ec, nsISupports * aDelegate=0x00000000, const nsID &
aIID={...}, void * * aResult=0x0012e000) Line 1990 + 0x10 C++
xpcom_core.dll!nsComponentManagerImpl::GetServiceByContractID(const char *
aContractID=0x013bc4ec, const nsID & aIID={...}, void * * result=0x0012e068)
Line 2422 + 0x32 C++
xpcom_core.dll!CallGetService(const char * aContractID=0x013bc4ec, const nsID
& aIID={...}, void * * aResult=0x0012e068) Line 93 C++
xpcom_core.dll!nsGetServiceByContractIDWithError::operator()(const nsID &
aIID={...}, void * * aInstancePtr=0x0012e068) Line 286 + 0x13 C++

xppref32.dll!nsCOMPtr<ipcITransactionService>::assign_from_gs_contractid_with_error(const
nsGetServiceByContractIDWithError & gs={...}, const nsID & aIID={...}) Line
1282 + 0x11 C++
xppref32.dll!nsCOMPtr<ipcITransactionService>::operator=(const
nsGetServiceByContractIDWithError & rhs={...}) Line 772 C++
xppref32.dll!nsSharedPrefHandler::EnsureTransactionService() Line 273 C++
xppref32.dll!nsSharedPrefHandler::OnSavePrefs() Line 144 + 0x8 C++
> xppref32.dll!nsPrefService::SavePrefFile(nsIFile * aFile=0x00000000) Line
244 + 0xb C++
xppref32.dll!nsPref::SavePrefFile(nsIFile * aFile=0x00000000) Line 79 + 0x22 C++
wallet.dll!SI_SetCharPref(const char * prefname=0x03a1a114, const char *
prefvalue=0x035c6fa0) Line 216 + 0x19 C++
wallet.dll!SI_InitSignonFileName() Line 369 + 0x13 C++
wallet.dll!SI_LoadSignonData() Line 1884 C++
wallet.dll!si_RegisterSignonPrefCallbacks() Line 324 C++
wallet.dll!si_GetSignonRememberingPref() Line 360 C++
wallet.dll!si_RememberSignonData(nsIPrompt * dialog=0x035c6e10, const char *
passwordRealm=0x0012e56c, const char * legacyRealm=0x0012e514, nsVoidArray *
signonData=0x03661800, nsIDOMWindowInternal * window=0x01924414) Line 2213 +
0x5 C++
wallet.dll!SINGSIGN_RememberSignonData(nsIPrompt * dialog=0x035c6e10, nsIURI *
passwordRealm=0x03540d80, nsVoidArray * signonData=0x03661800,
nsIDOMWindowInternal * window=0x01924414) Line 2335 + 0x26 C++
wallet.dll!WLLT_OnSubmit(nsIContent * currentForm=0x01ac2160,
nsIDOMWindowInternal * window=0x01924414) Line 3811 + 0x20 C++
wallet.dll!nsWalletlibService::Notify(nsIContent * formNode=0x01ac2160,
nsIDOMWindowInternal * window=0x01924414, nsIURI * actionURL=0x03596390, int *
cancelSubmit=0x0012ee6c) Line 233 + 0xd C++
gklayout.dll!nsHTMLFormElement::NotifySubmitObservers(nsIURI *
aActionURL=0x03596390, int * aCancelSubmit=0x0012ee6c) Line 979 + 0x2c C++
gklayout.dll!nsHTMLFormElement::SubmitSubmission(nsPresContext *
aPresContext=0x0357b5d0, nsIFormSubmission * aFormSubmission=0x01adee10) Line
888 + 0x1e C++
gklayout.dll!nsHTMLFormElement::DoSubmit(nsPresContext *
aPresContext=0x0357b5d0, nsEvent * aEvent=0x0012eff8) Line 817 + 0x15 C++
gklayout.dll!nsHTMLFormElement::DoSubmitOrReset(nsPresContext *
aPresContext=0x0357b5d0, nsEvent * aEvent=0x0012eff8, int aMessage=0x000004b0)
Line 742 + 0x10 C++
gklayout.dll!nsHTMLFormElement::HandleDOMEvent(nsPresContext *
aPresContext=0x0357b5d0, nsEvent * aEvent=0x0012eff8, nsIDOMEvent * *
aDOMEvent=0x00000000, unsigned int aFlags=0x00000001, nsEventStatus *
aEventStatus=0x0012f024) Line 700 C++
gklayout.dll!PresShell::HandleDOMEventWithTarget(nsIContent *
aTargetContent=0x01ac2160, nsEvent * aEvent=0x0012eff8, nsEventStatus *
aStatus=0x0012f024) Line 6152 C++
gklayout.dll!nsHTMLInputElement::MaybeSubmitForm(nsPresContext *
aPresContext=0x0357b5d0) Line 962 C++
gklayout.dll!nsHTMLInputElement::HandleDOMEvent(nsPresContext *
aPresContext=0x0357b5d0, nsEvent * aEvent=0x0012f80c, nsIDOMEvent * *
aDOMEvent=0x00000000, unsigned int aFlags=0x00000001, nsEventStatus *
aEventStatus=0x0012f614) Line 1579 + 0xf C++
gklayout.dll!PresShell::HandleEventInternal(nsEvent * aEvent=0x0012f80c,
nsIView * aView=0x01ab8db0, unsigned int aFlags=0x00000001, nsEventStatus *
aStatus=0x0012f614) Line 6056 + 0x31 C++
gklayout.dll!PresShell::HandleEvent(nsIView * aView=0x01ab8db0, nsGUIEvent *
aEvent=0x0012f80c, nsEventStatus * aEventStatus=0x0012f614, int
aForceHandle=0x00000001, int & aHandled=0x00000001) Line 5900 + 0x19 C++
gklayout.dll!nsViewManager::HandleEvent(nsView * aView=0x01ab8db0, nsGUIEvent
* aEvent=0x0012f80c, int aCaptured=0x00000000) Line 2450 C++
gklayout.dll!nsViewManager::DispatchEvent(nsGUIEvent * aEvent=0x0012f80c,
nsEventStatus * aStatus=0x0012f754) Line 2217 + 0x14 C++
gklayout.dll!HandleEvent(nsGUIEvent * aEvent=0x0012f80c) Line 174 C++
gkwidget.dll!nsWindow::DispatchEvent(nsGUIEvent * event=0x0012f80c,
nsEventStatus & aStatus=nsEventStatus_eIgnore) Line 1150 + 0xa C++
gkwidget.dll!nsWindow::DispatchWindowEvent(nsGUIEvent * event=0x0012f80c)
Line 1171 C++
gkwidget.dll!nsWindow::DispatchKeyEvent(unsigned int aEventType=0x00000083,
unsigned short aCharCode=0x0000, unsigned int aVirtualCharCode=0x0000000d, long
aKeyData=0x001c0001, unsigned int aFlags=0x00000000) Line 3358 + 0xf C++
gkwidget.dll!nsWindow::OnKeyDown(unsigned int aVirtualKeyCode=0x0000000d,
unsigned int aScanCode=0x0000001c, long aKeyData=0x001c0001) Line 3489 C++
gkwidget.dll!nsWindow::ProcessMessage(unsigned int msg=0x00000100, unsigned
int wParam=0x0000000d, long lParam=0x001c0001, long * aRetValue=0x0012fd50)
Line 4342 + 0x1d C++
gkwidget.dll!nsWindow::WindowProc(HWND__ * hWnd=0x000e1dfc, unsigned int
msg=0x00000100, unsigned int wParam=0x0000000d, long lParam=0x001c0001) Line
1442 + 0x1b C++
user32.dll!_InternalCallWinProc@20() + 0x28
user32.dll!_UserCallWinProcCheckWow@32() + 0xb7
user32.dll!_DispatchMessageWorker@8() + 0xdc
user32.dll!_DispatchMessageA@4() + 0xf
mfc71d.dll!AfxInternalPumpMessage() Line 188 C++
mfc71d.dll!CWinThread::PumpMessage() Line 916 C++
mfc71d.dll!CWinThread::Run() Line 637 + 0xb C++
mfc71d.dll!CWinApp::Run() Line 701 C++
mfc71d.dll!AfxWinMain(HINSTANCE__ * hInstance=0x00400000, HINSTANCE__ *
hPrevInstance=0x00000000, char * lpCmdLine=0x00142384, int nCmdShow=0x0000000a)
Line 49 + 0xb C++
mfcembed.exe!WinMain(HINSTANCE__ * hInstance=0x00400000, HINSTANCE__ *
hPrevInstance=0x00000000, char * lpCmdLine=0x00142384, int nCmdShow=0x0000000a)
Line 25 C++
mfcembed.exe!WinMainCRTStartup() Line 390 + 0x39 C
kernel32.dll!_BaseProcessStart@4() + 0x23

each and every time anything poke prefs, or wink at it or whatever, shared
pref handler insists on trying to get ipcd *again*. it need to seriously
consider giving up and not trying again until the user instructs it to do so.
