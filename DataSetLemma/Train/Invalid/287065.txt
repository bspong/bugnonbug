0[344708]: ###!!! ASSERTION: recursive painting not permitted: '!IsPainting()', file r:/mozilla/view/src/nsViewManager.cpp, line 813
0[344708]: ###!!! ASSERTION: recursive painting not permitted: '!IsPainting()',
file r:/mozilla/view/src/nsViewManager.cpp, line 813
0[344708]: ###!!! Break: at file r:/mozilla/view/src/nsViewManager.cpp, line 813

xpcom_core.dll!nsDebug::Assertion(const char * aStr=0x020553bc, const char *
aExpr=0x020553ac, const char * aFile=0x02055384, int aLine=0x0000032d) Line 109 C++
> gklayout.dll!nsViewManager::Refresh(nsView * aView=0x06931e10,
nsIRenderingContext * aContext=0x08bdc978, nsIRegion * aRegion=0x08bdcba0,
unsigned int aUpdateFlags=0x00000001) Line 813 + 0x29 C++
gklayout.dll!nsViewManager::DispatchEvent(nsGUIEvent * aEvent=0x0012a128,
nsEventStatus * aStatus=0x0012a008) Line 2028 C++
gklayout.dll!HandleEvent(nsGUIEvent * aEvent=0x0012a128) Line 174 C++
gkwidget.dll!nsWindow::DispatchEvent(nsGUIEvent * event=0x0012a128,
nsEventStatus & aStatus=nsEventStatus_eIgnore) Line 1150 + 0xa C++
gkwidget.dll!nsWindow::DispatchWindowEvent(nsGUIEvent * event=0x0012a128,
nsEventStatus & aStatus=nsEventStatus_eIgnore) Line 1176 C++
gkwidget.dll!nsWindow::OnPaint(HDC__ * aDC=0x00000000) Line 5521 + 0x1c C++
gkwidget.dll!nsWindow::ProcessMessage(unsigned int msg=0x0000000f, unsigned
int wParam=0x00000000, long lParam=0x00000000, long * aRetValue=0x0012a630)
Line 4253 + 0x13 C++
gkwidget.dll!nsWindow::WindowProc(HWND__ * hWnd=0x000b0f72, unsigned int
msg=0x0000000f, unsigned int wParam=0x00000000, long lParam=0x00000000) Line
1442 + 0x1b C++
user32.dll!_InternalCallWinProc@20() + 0x28
user32.dll!_UserCallWinProcCheckWow@32() + 0xb7
user32.dll!_DispatchClientMessage@20() + 0x4d
user32.dll!___fnDWORD@4() + 0x24
ntdll.dll!_KiUserCallbackDispatcher@12() + 0x13
user32.dll!_NtUserDispatchMessage@4() + 0xc
user32.dll!_DispatchMessageW@4() + 0xf
gkwidget.dll!nsAppShell::DispatchNativeEvent(int aRealEvent=0x00000001, void *
aEvent=0x0246aa5c) Line 221 C++
jsd3250.dll!jsdService::EnterNestedEventLoop(jsdINestCallback *
callback=0x085926b8, unsigned int * _rval=0x0012a9d8) Line 3000 C++
xpcom_core.dll!XPTC_InvokeByIndex(nsISupports * that=0x00c03bc0, unsigned int
methodIndex=0x00000031, unsigned int paramCount=0x00000002, nsXPTCVariant *
params=0x0012a9c8) Line 102 C++
xpc3250.dll!XPCWrappedNative::CallMethod(XPCCallContext & ccx={...},
XPCWrappedNative::CallMode mode=CALL_METHOD) Line 2068 + 0x1e C++
xpc3250.dll!XPC_WN_CallMethod(JSContext * cx=0x03ab1d10, JSObject *
obj=0x07195c28, unsigned int argc=0x00000001, long * argv=0x036f1558, long *
vp=0x0012ac9c) Line 1311 + 0xb C++
js3250.dll!js_Invoke(JSContext * cx=0x03ab1d10, unsigned int argc=0x00000001,
unsigned int flags=0x00000000) Line 1293 + 0x20 C
js3250.dll!js_Interpret(JSContext * cx=0x03ab1d10, unsigned char *
pc=0x07550327, long * result=0x0012b810) Line 3566 + 0xf C
js3250.dll!js_Invoke(JSContext * cx=0x03ab1d10, unsigned int argc=0x00000003,
unsigned int flags=0x00000002) Line 1313 + 0x13 C
xpc3250.dll!nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS *
wrapper=0x07232308, unsigned short methodIndex=0x0003, const nsXPTMethodInfo *
info=0x0754da38, nsXPTCMiniVariant * nativeParams=0x0012bb24) Line 1413 + 0x14 C++
xpc3250.dll!nsXPCWrappedJS::CallMethod(unsigned short methodIndex=0x0003,
const nsXPTMethodInfo * info=0x0754da38, nsXPTCMiniVariant * params=0x0012bb24)
Line 450 C++
xpcom_core.dll!PrepareAndDispatch(nsXPTCStubBase * self=0x07232308, unsigned
int methodIndex=0x00000003, unsigned int * args=0x0012bbec, unsigned int *
stackBytesToPop=0x0012bbdc) Line 117 + 0x1c C++
xpcom_core.dll!SharedStub() Line 147 C++
jsd3250.dll!jsds_ExecutionHookProc(JSDContext * jsdc=0x02f34dc8,
JSDThreadState * jsdthreadstate=0x06d6c980, unsigned int type=0x00000004, void *
callerdata=0x00000000, long * rval=0x0012c64c) Line 683 C++
jsd3250.dll!jsd_CallExecutionHook(JSDContext * jsdc=0x02f34dc8, JSContext *
cx=0x03ab1d10, unsigned int type=0x00000004, unsigned int (JSDContext *,
JSDThreadState *, unsigned int, void *, long *)* hook=0x012019c0, void *
hookData=0x00000000, long * rval=0x0012c64c) Line 177 + 0x17 C
jsd3250.dll!jsd_ThrowHandler(JSContext * cx=0x03ab1d10, JSScript *
script=0x03990cb0, unsigned char * pc=0x03990cea, long * rval=0x0012c64c, void *
closure=0x02f34dc8) Line 149 + 0x1b C
js3250.dll!js_Interpret(JSContext * cx=0x03ab1d10, unsigned char *
pc=0x03990cea, long * result=0x0012c798) Line 5305 + 0x26 C
js3250.dll!js_Invoke(JSContext * cx=0x03ab1d10, unsigned int argc=0x00000001,
unsigned int flags=0x00000002) Line 1313 + 0x13 C
js3250.dll!js_InternalInvoke(JSContext * cx=0x03ab1d10, JSObject *
obj=0x07241b20, long fval=0x07243580, unsigned int flags=0x00000000, unsigned
int argc=0x00000001, long * argv=0x0012ca90, long * rval=0x0012ca94) Line
1390 + 0x14 C
js3250.dll!JS_CallFunctionValue(JSContext * cx=0x03ab1d10, JSObject *
obj=0x07241b20, long fval=0x07243580, unsigned int argc=0x00000001, long *
argv=0x0012ca90, long * rval=0x0012ca94) Line 3831 + 0x1f C
gklayout.dll!nsJSContext::CallEventHandler(JSObject * aTarget=0x07241b20,
JSObject * aHandler=0x07243580, unsigned int argc=0x00000001, long *
argv=0x0012ca90, long * rval=0x0012ca94) Line 1401 + 0x21 C++
gklayout.dll!nsJSEventListener::HandleEvent(nsIDOMEvent * aEvent=0x03990db0)
Line 205 + 0x2d C++
gklayout.dll!nsEventListenerManager::HandleEventSubType(nsListenerStruct *
aListenerStruct=0x06c60ad8, nsIDOMEvent * aDOMEvent=0x03990db0,
nsIDOMEventTarget * aCurrentTarget=0x071a4840, unsigned int aSubType=0x00000008,
unsigned int aPhaseFlags=0x00000007) Line 1557 + 0x14 C++
gklayout.dll!nsEventListenerManager::HandleEvent(nsPresContext *
aPresContext=0x03af2010, nsEvent * aEvent=0x0012d0e4, nsIDOMEvent * *
aDOMEvent=0x0012cfd8, nsIDOMEventTarget * aCurrentTarget=0x071a4840, unsigned
int aFlags=0x00000007, nsEventStatus * aEventStatus=0x0012d0e0) Line 1656 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x03af2010, nsEvent * aEvent=0x0012d0e4, nsIDOMEvent * *
aDOMEvent=0x0012cfd8, unsigned int aFlags=0x00000007, nsEventStatus *
aEventStatus=0x0012d0e0) Line 2046 C++
gklayout.dll!PresShell::HandleDOMEventWithTarget(nsIContent *
aTargetContent=0x06c608f8, nsEvent * aEvent=0x0012d0e4, nsEventStatus *
aStatus=0x0012d0e0) Line 6152 C++
gklayout.dll!nsMenuFrame::Execute(nsGUIEvent * aEvent=0x00000000) Line 1688 C++
gklayout.dll!nsMenuFrame::Enter() Line 1309 C++
gklayout.dll!nsMenuPopupFrame::Enter() Line 1558 C++
gklayout.dll!nsMenuFrame::Enter() Line 1323 C++
gklayout.dll!nsMenuBarFrame::Enter() Line 626 C++
gklayout.dll!nsMenuListener::KeyPress(nsIDOMEvent * aKeyEvent=0x03990ac8)
Line 201 C++
gklayout.dll!DispatchToInterface(nsIDOMEvent * aEvent=0x03990ac8,
nsIDOMEventListener * aListener=0x07320448, unsigned int (nsIDOMEvent *)*
aMethod=0x01cd1450, const nsID & aIID={...}, int * aHasInterface=0x0012d218)
Line 136 + 0xb C++
gklayout.dll!nsEventListenerManager::HandleEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, nsIDOMEventTarget * aCurrentTarget=0x01807544, unsigned
int aFlags=0x00000004, nsEventStatus * aEventStatus=0x0012f540) Line 1647 +
0x23 C++
gklayout.dll!nsXULDocument::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 1237 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2028 + 0x28 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2025 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2025 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2025 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2025 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2025 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2025 C++
gklayout.dll!nsXULElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2025 C++
gklayout.dll!nsXULElement::HandleChromeEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 2731 + 0x23 C++
gklayout.dll!nsGlobalWindow::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 903 C++
gklayout.dll!nsDocument::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000004, nsEventStatus *
aEventStatus=0x0012f540) Line 3813 C++
gklayout.dll!nsGenericElement::HandleDOMEvent(nsPresContext *
aPresContext=0x037739a8, nsEvent * aEvent=0x0012f738, nsIDOMEvent * *
aDOMEvent=0x0012f3a4, unsigned int aFlags=0x00000007, nsEventStatus *
aEventStatus=0x0012f540) Line 1995 + 0x2e C++
gklayout.dll!PresShell::HandleEventInternal(nsEvent * aEvent=0x0012f738,
nsIView * aView=0x08768928, unsigned int aFlags=0x00000001, nsEventStatus *
aStatus=0x0012f540) Line 6056 + 0x31 C++
gklayout.dll!PresShell::HandleEvent(nsIView * aView=0x08768928, nsGUIEvent *
aEvent=0x0012f738, nsEventStatus * aEventStatus=0x0012f540, int
aForceHandle=0x00000001, int & aHandled=0x00000001) Line 5900 + 0x19 C++
gklayout.dll!nsViewManager::HandleEvent(nsView * aView=0x08768928, nsGUIEvent
* aEvent=0x0012f738, int aCaptured=0x00000000) Line 2450 C++
gklayout.dll!nsViewManager::DispatchEvent(nsGUIEvent * aEvent=0x0012f738,
nsEventStatus * aStatus=0x0012f680) Line 2217 + 0x14 C++
gklayout.dll!HandleEvent(nsGUIEvent * aEvent=0x0012f738) Line 174 C++
gkwidget.dll!nsWindow::DispatchEvent(nsGUIEvent * event=0x0012f738,
nsEventStatus & aStatus=nsEventStatus_eIgnore) Line 1150 + 0xa C++
gkwidget.dll!nsWindow::DispatchWindowEvent(nsGUIEvent * event=0x0012f738)
Line 1171 C++
gkwidget.dll!nsWindow::DispatchKeyEvent(unsigned int aEventType=0x00000083,
unsigned short aCharCode=0x0000, unsigned int aVirtualCharCode=0x0000000d, long
aKeyData=0x001c0001, unsigned int aFlags=0x00000010) Line 3358 + 0xf C++
gkwidget.dll!nsWindow::OnKeyDown(unsigned int aVirtualKeyCode=0x0000000d,
unsigned int aScanCode=0x0000001c, long aKeyData=0x001c0001) Line 3489 C++
gkwidget.dll!nsWindow::ProcessMessage(unsigned int msg=0x00000100, unsigned
int wParam=0x0000000d, long lParam=0x001c0001, long * aRetValue=0x0012fc7c)
Line 4342 + 0x1d C++
gkwidget.dll!nsWindow::WindowProc(HWND__ * hWnd=0x00120edc, unsigned int
msg=0x00000100, unsigned int wParam=0x0000000d, long lParam=0x001c0001) Line
1442 + 0x1b C++
user32.dll!_InternalCallWinProc@20() + 0x28
user32.dll!_UserCallWinProcCheckWow@32() + 0xb7
user32.dll!_DispatchMessageWorker@8() + 0xdc
user32.dll!_DispatchMessageW@4() + 0xf
gkwidget.dll!nsAppShell::Run() Line 135 C++
appcomps.dll!nsAppStartup::Run() Line 208 C++
mozilla.exe!main1(int argc=0x00000002, char * * argv=0x00347930, nsISupports *
nativeApp=0x00c061f0) Line 1325 + 0x20 C++
mozilla.exe!main(int argc=0x00000002, char * * argv=0x00347930) Line 1831 +
0x25 C++
mozilla.exe!mainCRTStartup() Line 398 + 0x11 C
kernel32.dll!_BaseProcessStart@4() + 0x23
