flawfinder warning in j module
Heikki ran flawfinder (http://www.dwheeler.com/flawfinder) on Mozilla 1.0.1
branch.

flawfinder found 72 warning in j module code (1867-1938). Go through
that list and for each warning:

* If it is false positive, comment here why it is not an issue
* If it is a real issue, make patch for it here and let's get them checked in

In addition to checking the branch, also check the trunk.

1867) js/jsd/jsd_scpt.c:198 [4] (buffer) sprintf: doe not check for buffer
overflows. Use snprintf or vsnprintf.

1868) js/jsd/jsd_step.c:106 [4] (format) printf: if format string can be
influenced by an attacker, they can be exploited. Use a constant for the format
specification.

1869) js/jsd/jsd_xpc.cpp:71 [4] (format) printf: if format string can be
influenced by an attacker, they can be exploited. Use a constant for the format
specification.

1870) js/src/js.c:112 [4] (buffer) strcpy: doe not check for buffer overflows.
Consider using strncpy or strlcpy.

1871) js/src/js.c:155 [4] (format) fprintf: if format string can be influenced
by an attacker, they can be exploited. Use a constant for the format
specification.

1872) js/src/js.c:165 [4] (format) vsnprintf: if format string can be
influenced by an attacker, they can be exploited. Use a constant for the format
specification.

1873) js/src/js.c:177 [4] (format) vsnprintf: if format string can be
influenced by an attacker, they can be exploited. Use a constant for the format
specification.

1874) js/src/js.c:212 [3] (buffer) getenv: Environment variable are untrustable
input if they can be set by an attacker. They can have any content and length,
and the same variable can be set more than once.. Check environment variable
carefully before using them.

1875) js/src/js.c:265 [4] (buffer) strcpy: doe not check for buffer overflows.
Consider using strncpy or strlcpy.

1876) js/src/js.c:274 [4] (format) fprintf: if format string can be influenced
by an attacker, they can be exploited. Use a constant for the format
specification.

1877) js/src/js.c:281 [4] (buffer) strcpy: doe not check for buffer overflows.
Consider using strncpy or strlcpy.

1878) js/src/js.c:1883 [4] (tmpfile) execvp: this call out to a new process and
is difficult to use safely. try using a library call that implement the same
functionality if available..

1879) js/src/js.c:1938 [3] (buffer) getenv: Environment variable are
untrustable input if they can be set by an attacker. They can have any content
and length, and the same variable can be set more than once.. Check environment
variable carefully before using them.

1880) js/src/js.c:1957 [4] (race) access: this usually indicates a security
flaw. If an attacker can change anything along the path between the call to
access() and the file's actual use (e.g., by moving files), the attacker can
exploit the race condition. Set up the correct permission (e.g., using
setuid()) and try to open the file directly.

1881) js/src/js.c:2125 [3] (buffer) getenv: Environment variable are
untrustable input if they can be set by an attacker. They can have any content
and length, and the same variable can be set more than once.. Check environment
variable carefully before using them.

1882) js/src/jsdhash.c:383 [3] (buffer) getenv: Environment variable are
untrustable input if they can be set by an attacker. They can have any content
and length, and the same variable can be set more than once.. Check environment
variable carefully before using them.

1883) js/src/jsdhash.c:387 [3] (buffer) getenv: Environment variable are
untrustable input if they can be set by an attacker. They can have any content
and length, and the same variable can be set more than once.. Check environment
variable carefully before using them.

1884) js/src/jsdtoa.c:1922 [4] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy.

1885) js/src/jsdtoa.c:2684 [4] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy.

1886) js/src/jsfile.c:66 [4] (tmpfile) popen: this call out to a new process
and is difficult to use safely. try using a library call that implement the
same functionality if available..

1887) js/src/jsfile.c:203 [2] (buffer) sprintf: doe not check for buffer
overflows. Use snprintf or vsnprintf. Risk is low because the source ha a
constant maximum length.

1888) js/src/jsfile.c:289 [4] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy.

1889) js/src/jsfile.c:299 [4] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat.

1890) js/src/jsfile.c:483 [4] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy.

1891) js/src/jsfile.c:488 [4] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat.

1892) js/src/jsfile.c:508 [4] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy.

1893) js/src/jsfile.c:515 [4] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat.

1894) js/src/jsfile.c:586 [1] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy. Risk is low because the source is
a constant character.

1895) js/src/jsfile.c:1954 [4] (buffer) sprintf: doe not check for buffer
overflows. Use snprintf or vsnprintf.

1896) js/src/jsfile.c:2268 [1] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant character.

1897) js/src/jsfile.c:2269 [2] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant string.

1898) js/src/jsfile.c:2273 [1] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant character.

1899) js/src/jsfile.c:2274 [2] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant string.

1900) js/src/jsfile.c:2278 [1] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant character.

1901) js/src/jsfile.c:2279 [2] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant string.

1902) js/src/jsfile.c:2283 [1] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant character.

1903) js/src/jsfile.c:2284 [2] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant string.

1904) js/src/jsfile.c:2288 [1] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant character.

1905) js/src/jsfile.c:2289 [2] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant string.

1906) js/src/jsfile.c:2293 [1] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant character.

1907) js/src/jsfile.c:2294 [2] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant string.

1908) js/src/jsfile.c:2298 [1] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant character.

1909) js/src/jsfile.c:2299 [2] (buffer) strcat: doe not check for buffer
overflows. Consider using strncat or strlcat. Risk is low because the source is
a constant string.

1910) js/src/jsgc.c:866 [2] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy. Risk is low because the source is
a constant string.

1911) js/src/jsgc.c:869 [2] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy. Risk is low because the source is
a constant string.

1912) js/src/jsgc.c:872 [2] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy. Risk is low because the source is
a constant string.

1913) js/src/jsgc.c:891 [2] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy. Risk is low because the source is
a constant string.

1914) js/src/jsgc.c:897 [2] (buffer) strcpy: doe not check for buffer
overflows. Consider using strncpy or strlcpy. Risk is low because the source is
a constant string.

1915) js/src/jsprf.c:358 [4] (format) sprintf: Potential format string problem.
Make format string constant.

1916) js/src/jsprf.c:417 [3] (buffer) getenv: Environment variable are
untrustable input if they can be set by an attacker. They can have any content
and length, and the same variable can be set more than once.. Check environment
variable carefully before using them.

1917) js/src/liveconnect/jsj_JavaArray.c:185 [2] (buffer) sprintf: doe not
check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the
source ha a constant maximum length.

1918) js/src/liveconnect/jsj_JavaPackage.c:71 [4] (race) access: this usually
indicates a security flaw. If an attacker can change anything along the path
between the call to access() and the file's actual use (e.g., by moving files),
the attacker can exploit the race condition. Set up the correct permission
(e.g., using setuid()) and try to open the file directly.

1919) js/src/liveconnect/jsj_JavaPackage.c:76 [4] (race) access: this usually
indicates a security flaw. If an attacker can change anything along the path
between the call to access() and the file's actual use (e.g., by moving files),
the attacker can exploit the race condition. Set up the correct permission
(e.g., using setuid()) and try to open the file directly.

1920) js/src/liveconnect/jsj_JavaPackage.c:489 [4] (race) access: this usually
indicates a security flaw. If an attacker can change anything along the path
between the call to access() and the file's actual use (e.g., by moving files),
the attacker can exploit the race condition. Set up the correct permission
(e.g., using setuid()) and try to open the file directly.

1921) js/src/liveconnect/jsj_private.h:656 [4] (format) printf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1922) js/src/liveconnect/jsjava.h:185 [4] (race) access: this usually indicates
a security flaw. If an attacker can change anything along the path between the
call to access() and the file's actual use (e.g., by moving files), the attacker
can exploit the race condition. Set up the correct permission (e.g., using
setuid()) and try to open the file directly.

1923) js/src/xpconnect/shell/xpcshell.cpp:416 [4] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy.

1924) js/src/xpconnect/shell/xpcshell.cpp:425 [4] (format) fprintf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1925) js/src/xpconnect/shell/xpcshell.cpp:428 [4] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy.

1926) js/src/xpconnect/src/xpcdebug.cpp:290 [4] (format) printf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1927) js/src/xpconnect/src/xpcdebug.cpp:362 [4] (format) printf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1928) js/src/xpconnect/src/xpcdebug.cpp:365 [4] (format) printf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1929) js/src/xpconnect/src/xpcwrappedjsclass.cpp:1265 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

1930) js/src/xpconnect/src/xpcwrappedjsclass.cpp:1266 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

1931) js/src/xpconnect/src/xpcwrappedjsclass.cpp:1270 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

1932) js/src/xpconnect/src/xpcwrappedjsclass.cpp:1275 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

1933) js/src/xpconnect/src/xpcwrappedjsclass.cpp:1276 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

1934) js/src/xpconnect/tests/TestXPC.cpp:125 [4] (format) printf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1935) js/src/xpconnect/tests/TestXPC.cpp:607 [4] (format) printf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1936) js/src/xpconnect/tests/TestXPC.cpp:626 [4] (format) printf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1937) js/src/xpconnect/tests/TestXPC.cpp:693 [4] (format) printf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

1938) js/src/xpconnect/tests/components/xpctest_echo.cpp:482 [4] (format)
printf: if format string can be influenced by an attacker, they can be
exploited. Use a constant for the format specification.
