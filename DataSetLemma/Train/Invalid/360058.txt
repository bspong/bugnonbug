crash QI'ing a dead nsCOMPtr after closing Venkman while at breakpoint
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9a1) Gecko/20061108 SeaMonkey/1.5a

Steps to reproduce:

(1) Start SeaMonkey browser.
(2) Start Venkman within SeaMonkey.
(3) Trigger an exception or hit a breakpoint in Venkman. Do not hit "Continue".
(4) Close Venkman, clicking "OK" on the Debugging in progress dialog.

Reproducible: Every time.

cc'ing smaug a it may be event related.

Stack:
> xpcom_core.dll!nsQueryInterface::operator()(const nsID & aIID={...}, void * * answer=0x0012ce74) Line 47 + 0x15 byte C++
gklayout.dll!nsCOMPtr<nsIDOMEventTarget>::assign_from_qi(nsQueryInterface qi={...}, const nsID & aIID={...}) Line 1232 + 0x10 byte C++
gklayout.dll!nsCOMPtr<nsIDOMEventTarget>::nsCOMPtr<nsIDOMEventTarget>(nsQueryInterface qi={...}) Line 646 C++
gklayout.dll!nsXULTooltipListener::RemoveTooltipSupport(nsIContent * aNode=0x04c2e548) Line 320 C++
gklayout.dll!TooltipListenerPropertyDtor(void * aObject=0x04c2e548, nsIAtom * aPropertyName=0x00aac858, void * aPropertyValue=0x04c30cf0, void * aData=0x00000000) Line 330 C++
gklayout.dll!DestroyPropertyEnumerator(PLDHashTable * table=0x04145cc4, PLDHashEntryHdr * hdr=0x04b95af4, unsigned int number=0x00000005, void * arg=0x00000000) Line 326 + 0x26 byte C++
xpcom_core.dll!PL_DHashTableEnumerate(PLDHashTable * table=0x04145cc4, PLDHashOperator (PLDHashTable *, PLDHashEntryHdr *, unsigned int, void *)* etor=0x019dc3a0, void * arg=0x00000000) Line 683 + 0x19 byte C
gklayout.dll!nsPropertyTable::PropertyList::Destroy() Line 336 + 0x14 byte C++
gklayout.dll!nsPropertyTable::DeleteAllProperties() Line 107 C++
gklayout.dll!nsDocument::LastRelease() Line 767 C++
gklayout.dll!nsDocument::Release() Line 812 + 0xcf byte C++
gklayout.dll!nsXMLDocument::Release() Line 206 + 0xd byte C++
gklayout.dll!nsXULDocument::Release() Line 296 + 0xd byte C++
xpcom_core.dll!nsCOMPtr_base::~nsCOMPtr_base() Line 82 C++
gklayout.dll!nsCOMPtr<nsISupports>::~nsCOMPtr<nsISupports>() + 0x10 byte C++
gklayout.dll!nsEvent::~nsEvent() + 0x28 byte C++
gklayout.dll!nsEvent::`scalar deleting destructor'() + 0xf byte C++
gklayout.dll!nsDOMEvent::~nsDOMEvent() Line 139 + 0x1f byte C++
gklayout.dll!nsDOMEvent::`scalar deleting destructor'() + 0xf byte C++
gklayout.dll!nsDOMEvent::Release() Line 144 + 0xd9 byte C++
xpc3250.dll!XPCJSRuntime::GCCallback(JSContext * cx=0x05004c50, JSGCStatus status=JSGC_END) Line 590 + 0x14 byte C++
gklayout.dll!DOMGCCallback(JSContext * cx=0x05004c50, JSGCStatus status=JSGC_END) Line 3157 + 0x17 byte C++
js3250.dll!js_GC(JSContext * cx=0x05004c50, JSGCInvocationKind gckind=GC_NORMAL) Line 3136 + 0x11 byte C
js3250.dll!JS_GC(JSContext * cx=0x05004c50) Line 1876 + 0xb byte C
gklayout.dll!nsJSContext::Notify(nsITimer * timer=0x04ea0ba8) Line 3113 + 0xd byte C++
xpcom_core.dll!nsTimerImpl::Fire() Line 387 C++
xpcom_core.dll!nsTimerEvent::Run() Line 458 C++
xpcom_core.dll!nsThread::ProcessNextEvent(int mayWait=0x00000001, int * result=0x0012d2e4) Line 483 C++
xpcom_core.dll!NS_ProcessNextEvent_P(nsIThread * thread=0x003d9228, int mayWait=0x00000001) Line 225 + 0x16 byte C++
appshell.dll!nsXULWindow::ShowModal() Line 402 + 0xc byte C++
appshell.dll!nsContentTreeOwner::ShowAsModal() Line 503 C++
embedcomponents.dll!nsWindowWatcher::OpenWindowJSInternal(nsIDOMWindow * aParent=0x035faaf0, const char * aUrl=0x01050bb8, const char * aName=0x010514dc, const char * aFeatures=0x010514b8, int aDialog=0x00000001, nsIArray * argv=0x04d04628, int aCalledFromJS=0x00000000, nsIDOMWindow * * _retval=0x0012d840) Line 898 C++
embedcomponents.dll!nsWindowWatcher::OpenWindow(nsIDOMWindow * aParent=0x035faaf0, const char * aUrl=0x01050bb8, const char * aName=0x010514dc, const char * aFeatures=0x010514b8, nsISupports * aArguments=0x04d23320, nsIDOMWindow * * _retval=0x0012d840) Line 415 + 0x2b byte C++
embedcomponents.dll!nsPromptService::DoDialog(nsIDOMWindow * aParent=0x035faaf0, nsIDialogParamBlock * aParamBlock=0x04d23320, const char * aChromeURL=0x01050bb8) Line 688 + 0x4f byte C++
embedcomponents.dll!nsPromptService::Alert(nsIDOMWindow * parent=0x035faaf0, const unsigned short * dialogTitle=0x0012d9f0, const unsigned short * text=0x03a54d20) Line 131 + 0x27 byte C++
embedcomponents.dll!nsPrompt::Alert(const unsigned short * dialogTitle=0x0012d9f0, const unsigned short * text=0x03a54d20) Line 274 + 0x30 byte C++
gklayout.dll!nsGlobalWindow::Alert(const nsAString_internal & aString={...}) Line 3411 + 0x4f byte C++
xpcom_core.dll!XPTC_InvokeByIndex(nsISupports * that=0x00000040, unsigned int methodIndex=0x00000001, unsigned int paramCount=0x0012dbd8, nsXPTCVariant * params=0x0012dac0) Line 102 C++
xpc3250.dll!XPCWrappedNative::CallMethod(XPCCallContext & ccx={...}, XPCWrappedNative::CallMode mode=0x00000040) Line 2162 + 0x1e byte C++
xpc3250.dll!XPCWrappedNative::CallMethod(XPCCallContext & ccx={...}, XPCWrappedNative::CallMode mode=CALL_METHOD) Line 2162 + 0x1e byte C++
xpc3250.dll!XPC_WN_CallMethod(JSContext * cx=0x035fae28, JSObject * obj=0x035ec3b8, unsigned int argc=0x00000001, long * argv=0x04e07690, long * vp=0x0012dea8) Line 1455 + 0xe byte C++
js3250.dll!js_Invoke(JSContext * cx=0x035fae28, unsigned int argc=0x00000001, unsigned int flags=0x00000000) Line 1396 + 0x20 byte C
js3250.dll!js_Interpret(JSContext * cx=0x035fae28, unsigned char * pc=0x0374439f, long * result=0x0012e9fc) Line 3948 + 0xf byte C
js3250.dll!js_Invoke(JSContext * cx=0x035fae28, unsigned int argc=0x00000001, unsigned int flags=0x00000002) Line 1415 + 0x13 byte C
js3250.dll!js_InternalInvoke(JSContext * cx=0x035fae28, JSObject * obj=0x036e7500, long fval=0x0470e050, unsigned int flags=0x00000000, unsigned int argc=0x00000001, long * argv=0x04e075d8, long * rval=0x0012eb78) Line 1490 + 0x14 byte C
js3250.dll!JS_CallFunctionValue(JSContext * cx=0x035fae28, JSObject * obj=0x036e7500, long fval=0x0470e050, unsigned int argc=0x00000001, long * argv=0x04e075d8, long * rval=0x0012eb78) Line 4357 + 0x1f byte C
gklayout.dll!nsJSContext::CallEventHandler(nsISupports * aTarget=0x0376ca60, void * aScope=0x035ec3b8, void * aHandler=0x0470e050, nsIArray * aargv=0x04c47c48, nsIVariant * * arv=0x0012ece8) Line 1750 + 0x24 byte C++
gklayout.dll!nsJSEventListener::HandleEvent(nsIDOMEvent * aEvent=0x04d0b988) Line 212 + 0x62 byte C++
gklayout.dll!nsEventListenerManager::HandleEventSubType(nsListenerStruct * aListenerStruct=0x0376cc10, nsIDOMEventListener * aListener=0x0376cbc0, nsIDOMEvent * aDOMEvent=0x04d0b988, nsISupports * aCurrentTarget=0x0376ca60, unsigned int aPhaseFlags=0x00000006) Line 1310 + 0x12 byte C++
gklayout.dll!nsEventListenerManager::HandleEvent(nsPresContext * aPresContext=0x036cb428, nsEvent * aEvent=0x0012f10c, nsIDOMEvent * * aDOMEvent=0x0012efb0, nsISupports * aCurrentTarget=0x0376ca60, unsigned int aFlags=0x00000006, nsEventStatus * aEventStatus=0x0012efb4) Line 1432 C++
gklayout.dll!nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor & aVisitor={...}, unsigned int aFlags=0x00000006) Line 356 C++
gklayout.dll!nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor & aVisitor={...}, unsigned int aFlags=0x00000006, nsDispatchingCallback * aCallback=0x0012f04c) Line 433 C++
gklayout.dll!nsEventDispatcher::Dispatch(nsISupports * aTarget=0x0376ca60, nsPresContext * aPresContext=0x036cb428, nsEvent * aEvent=0x0012f10c, nsIDOMEvent * aDOMEvent=0x00000000, nsEventStatus * aEventStatus=0x0012f56c, nsDispatchingCallback * aCallback=0x0012f04c, int aTargetIsChromeHandler=0x00000000) Line 639 + 0x12 byte C++
gklayout.dll!PresShell::HandleEventInternal(nsEvent * aEvent=0x0012f10c, nsIView * aView=0x00000000, nsEventStatus * aStatus=0x0012f56c) Line 6176 + 0x2b byte C++
gklayout.dll!PresShell::HandleEventWithTarget(nsEvent * aEvent=0x0012f10c, nsIFrame * aFrame=0x037e4894, nsIContent * aContent=0x0376ca60, nsEventStatus * aStatus=0x0012f56c) Line 6080 + 0x12 byte C++
gklayout.dll!nsEventStateManager::CheckForAndDispatchClick(nsPresContext * aPresContext=0x036cb428, nsMouseEvent * aEvent=0x0012f7a8, nsEventStatus * aStatus=0x0012f56c) Line 3230 + 0x45 byte C++
gklayout.dll!nsEventStateManager::PostHandleEvent(nsPresContext * aPresContext=0x036cb428, nsEvent * aEvent=0x0012f7a8, nsIFrame * aTargetFrame=0x037e4894, nsEventStatus * aStatus=0x0012f56c, nsIView * aView=0x0353b618) Line 2194 + 0x1c byte C++
gklayout.dll!PresShell::HandleEventInternal(nsEvent * aEvent=0x0012f7a8, nsIView * aView=0x0353b618, nsEventStatus * aStatus=0x0012f56c) Line 6194 + 0x36 byte C++
gklayout.dll!PresShell::HandlePositionedEvent(nsIView * aView=0x0353b618, nsIFrame * aTargetFrame=0x037e4894, nsGUIEvent * aEvent=0x0012f7a8, nsEventStatus * aEventStatus=0x0012f56c) Line 6063 + 0x14 byte C++
gklayout.dll!PresShell::HandleEvent(nsIView * aView=0x0353b618, nsGUIEvent * aEvent=0x0012f7a8, nsEventStatus * aEventStatus=0x0012f56c) Line 5891 + 0x1b byte C++
gklayout.dll!nsViewManager::HandleEvent(nsView * aView=0x0353b618, nsPoint aPoint={...}, nsGUIEvent * aEvent=0x0012f7a8, int aCaptured=0x00000000) Line 1668 C++
gklayout.dll!nsViewManager::DispatchEvent(nsGUIEvent * aEvent=0x0012f7a8, nsEventStatus * aStatus=0x0012f694) Line 1621 + 0x22 byte C++
gklayout.dll!HandleEvent(nsGUIEvent * aEvent=0x0012f7a8) Line 174 C++
gkwidget.dll!nsWindow::DispatchEvent(nsGUIEvent * event=0x0012f7a8, nsEventStatus & aStatus=nsEventStatus_eIgnore) Line 1108 + 0xc byte C++
gkwidget.dll!nsWindow::DispatchWindowEvent(nsGUIEvent * event=0x0012f7a8) Line 1129 C++
gkwidget.dll!nsWindow::DispatchMouseEvent(unsigned int aEventType=0x0000012d, unsigned int wParam=0x00000000, long lParam=0x003300e3) Line 6200 + 0x1a byte C++
gkwidget.dll!ChildWindow::DispatchMouseEvent(unsigned int aEventType=0x0000012d, unsigned int wParam=0x00000000, long lParam=0x003300e3) Line 6383 C++
gkwidget.dll!nsWindow::ProcessMessage(unsigned int msg=0x00000202, unsigned int wParam=0x00000000, long lParam=0x003300e3, long * aRetValue=0x0012fc18) Line 4664 + 0x20 byte C++
gkwidget.dll!nsWindow::WindowProc(HWND__ * hWnd=0x00060264, unsigned int msg=0x00000202, unsigned int wParam=0x00000000, long lParam=0x003300e3) Line 1297 + 0x1d byte C++
user32.dll!77d48734()
[Frames below may be incorrect and/or missing, no symbol loaded for user32.dll]
user32.dll!77d48816()
user32.dll!77d489cd()
user32.dll!77d49402()
user32.dll!77d48a10()
gkwidget.dll!nsAppShell::ProcessNextNativeEvent(int mayWait=0x00000001) Line 149 C++
gkwidget.dll!nsBaseAppShell::DoProcessNextNativeEvent(int mayWait=0x00000001) Line 136 + 0x11 byte C++
gkwidget.dll!nsBaseAppShell::OnProcessNextEvent(nsIThreadInternal * thr=0x003d9228, int mayWait=0x00000001, unsigned int recursionDepth=0x00000000) Line 231 + 0xf byte C++
xpcom_core.dll!nsThread::ProcessNextEvent(int mayWait=0x00000001, int * result=0x0012fe04) Line 472 C++
xpcom_core.dll!NS_ProcessNextEvent_P(nsIThread * thread=0x003d9228, int mayWait=0x00000001) Line 225 + 0x16 byte C++
gkwidget.dll!nsBaseAppShell::Run() Line 153 + 0xc byte C++
appcomps.dll!nsAppStartup::Run() Line 219 C++
seamonkey.exe!main1(int argc=0x00000004, char * * argv=0x003d4e28, nsISupports * nativeApp=0x00a742a0) Line 1245 + 0x22 byte C++
seamonkey.exe!main(int argc=0x00000004, char * * argv=0x003d4e28) Line 1747 + 0x25 byte C++
seamonkey.exe!__tmainCRTStartup() Line 586 + 0x19 byte C
seamonkey.exe!mainCRTStartup() Line 403 C
kernel32.dll!7c816fd7()
