flawfinder warning in layout
Heikki ran flawfinder (http://www.dwheeler.com/flawfinder) on Mozilla 1.0.1
branch.

flawfinder found 122 warning in layout code (3560-3681). Go through
that list and for each warning:

* If it is false positive, comment here why it is not an issue
* If it is a real issue, make patch for it here and let's get them checked in

In addition to checking the branch, also check the trunk.

3560) layout/html/base/src/nsFrame.cpp:4567 [4] (buffer) strcpy: doe not check
for buffer overflows. Consider using strncpy or strlcpy.

3561) layout/html/base/src/nsFrame.cpp:4568 [4] (buffer) strcpy: doe not check
for buffer overflows. Consider using strncpy or strlcpy.

3562) layout/html/base/src/nsFrame.cpp:4966 [2] (buffer) strcpy: doe not check
for buffer overflows. Consider using strncpy or strlcpy. Risk is low because the
source is a constant string.

3563) layout/html/base/src/nsFrame.cpp:4971 [2] (buffer) strcpy: doe not check
for buffer overflows. Consider using strncpy or strlcpy. Risk is low because the
source is a constant string.

3564) layout/html/base/src/nsFrame.cpp:4974 [2] (buffer) sprintf: doe not check
for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source
ha a constant maximum length.

3565) layout/html/base/src/nsHTMLReflowState.cpp:2184 [3] (buffer) getenv:
Environment variable are untrustable input if they can be set by an attacker.
They can have any content and length, and the same variable can be set more than
once.. Check environment variable carefully before using them.

3566) layout/html/base/src/nsPageFrame.cpp:91 [4] (format) fprintf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

3567) layout/html/base/src/nsPageFrame.cpp:92 [4] (format) fprintf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

3568) layout/html/base/src/nsPageFrame.cpp:93 [4] (format) fprintf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

3569) layout/html/base/src/nsPageFrame.cpp:94 [4] (format) fprintf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

3570) layout/html/base/src/nsPageFrame.cpp:95 [4] (format) fprintf: if format
string can be influenced by an attacker, they can be exploited. Use a constant
for the format specification.

3571) layout/html/base/src/nsPageFrame.cpp:596 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3572) layout/html/base/src/nsPageFrame.cpp:597 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3573) layout/html/base/src/nsPageFrame.cpp:598 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3574) layout/html/base/src/nsPresShell.cpp:7565 [2] (buffer) sprintf: doe not
check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the
source ha a constant maximum length.

3575) layout/html/base/src/nsPresShell.cpp:7593 [2] (buffer) sprintf: doe not
check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the
source ha a constant maximum length.

3576) layout/html/base/src/nsPresShell.cpp:7604 [2] (buffer) sprintf: doe not
check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the
source ha a constant maximum length.

3577) layout/html/base/src/nsPresShell.cpp:7733 [2] (buffer) sprintf: doe not
check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the
source ha a constant maximum length.

3578) layout/html/base/src/nsPresShell.cpp:7851 [4] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy.

3579) layout/html/base/src/nsPresShell.cpp:7856 [2] (buffer) strcat: doe not
check for buffer overflows. Consider using strncat or strlcat. Risk is low
because the source is a constant string.

3580) layout/html/base/src/nsSimplePageSequence.cpp:94 [4] (format) fprintf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3581) layout/html/base/src/nsSimplePageSequence.cpp:95 [4] (format) fprintf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3582) layout/html/base/src/nsSimplePageSequence.cpp:96 [4] (format) fprintf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3583) layout/html/base/src/nsSimplePageSequence.cpp:97 [4] (format) fprintf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3584) layout/html/base/src/nsSimplePageSequence.cpp:98 [4] (format) fprintf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3585) layout/html/forms/src/nsComboboxControlFrame.cpp:220 [4] (format) printf:
if format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3586) layout/html/forms/src/nsComboboxControlFrame.cpp:221 [4] (format) printf:
if format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3587) layout/html/forms/src/nsComboboxControlFrame.cpp:222 [4] (format) printf:
if format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3588) layout/html/forms/src/nsComboboxControlFrame.cpp:223 [4] (format) printf:
if format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3589) layout/html/forms/src/nsComboboxControlFrame.cpp:244 [4] (format) printf:
if format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3590) layout/html/forms/src/nsComboboxControlFrame.cpp:245 [4] (format) printf:
if format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3591) layout/html/forms/src/nsComboboxControlFrame.cpp:246 [4] (format) printf:
if format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3592) layout/html/forms/src/nsComboboxControlFrame.cpp:247 [4] (format) printf:
if format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3593) layout/html/forms/src/nsFormControlFrame.cpp:88 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3594) layout/html/forms/src/nsFormControlFrame.cpp:89 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3595) layout/html/forms/src/nsFormControlFrame.cpp:90 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3596) layout/html/forms/src/nsFormControlFrame.cpp:91 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3597) layout/html/forms/src/nsFormControlFrame.cpp:93 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3598) layout/html/forms/src/nsFormControlFrame.cpp:94 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3599) layout/html/forms/src/nsFormControlFrame.cpp:95 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3600) layout/html/forms/src/nsFormControlFrame.cpp:96 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3601) layout/html/forms/src/nsListControlFrame.cpp:170 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3602) layout/html/forms/src/nsListControlFrame.cpp:171 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3603) layout/html/forms/src/nsListControlFrame.cpp:172 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3604) layout/html/forms/src/nsListControlFrame.cpp:173 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3605) layout/html/forms/src/nsListControlFrame.cpp:194 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3606) layout/html/forms/src/nsListControlFrame.cpp:195 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3607) layout/html/forms/src/nsListControlFrame.cpp:196 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3608) layout/html/forms/src/nsListControlFrame.cpp:197 [4] (format) printf: if
format string can be influenced by an attacker, they can be exploited. Use a
constant for the format specification.

3609) layout/html/table/src/nsTableFrame.cpp:7223 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3610) layout/html/table/src/nsTableFrame.cpp:7225 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3611) layout/html/table/src/nsTableFrame.cpp:7229 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3612) layout/html/table/src/nsTableFrame.cpp:7231 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3613) layout/html/table/src/nsTableFrame.cpp:7233 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3614) layout/html/table/src/nsTableFrame.cpp:7235 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3615) layout/html/table/src/nsTableFrame.cpp:7251 [2] (buffer) strcpy: doe not
check for buffer overflows. Consider using strncpy or strlcpy. Risk is low
because the source is a constant string.

3616) layout/html/table/src/nsTableFrame.cpp:7254 [2] (buffer) sprintf: doe not
check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the
source ha a constant maximum length.

3617) layout/svg/base/src/nsSVGGenericContainerFrame.cpp:276 [4] (format)
printf: if format string can be influenced by an attacker, they can be
exploited. Use a constant for the format specification.

3618) layout/svg/base/src/nsSVGRenderingContext.cpp:167 [2] (buffer) sprintf:
doe not check for buffer overflows. Use snprintf or vsnprintf. Risk is low
because the source ha a constant maximum length.
