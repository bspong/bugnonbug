Mozilla/Firefox post 3.5 hide #windows/#tabs
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2) Gecko/20100206 Firefox/3.6
Build Identifier: Version 3.6

Prior to Firefox Version 3.5 it wa possible to scan the sessionstore.js file and determine how many windows/tabs a session had open. Post Firefox Version 3.5, when the information appears to have been moved into "places.sqlite" that is no longer true.

So (a) you have broken user script that can perform an analysis of session file to determine how many windows/tabs are open; (b) you have replaced them with obscure, undocumented data structure which cannot easily be interpreted by user to determine the same information; (c) you have failed to provide utility (documented) which provide such information (i.e. how many windows/tabs are incorporated into a session).

Is it any wonder that people would move to chrome where under a simple process model a "ps -C chrome | wc -l" would yield at least the window # information?

I understand that firefox is operating under a limited framework (a single process model) -- but that doe not prevent it from keeping statistic (and providing such statistic to the user) for thread consuming excess CPU. Firefox will only be able to effectively be able to compete against chrome if it can detail who are the "bad actors" amongst a group of URLs. Because there are bad actor -- and the individual (programs) which can detail them will win.

Reproducible: Always

Steps to Reproduce:
1. Startup a complex firefox session
2. or load lot of page (e.g. the first few hundred digg pages)
3. Attempt to determine # window / # tab open
Actual Results:
There is no longer any file which easily detail how many window or tab are open for a specific session. Thus Mozilla/Firefox should provide utility which provide such information or provide detailed documentation with respect to how it may be determined.

The individual who said we should replace "sessionstore.js" with "places.sqlite" should be lined up in back of the Mozilla HQ and simply shot. They provided a marginal benefit in performance in conjunction with a significant decline in the lack of user knowledge with respect to browser sessions. Never, ever, take knowledge away from the end user -- one destroys the basis of a potentially useful relationship. (Why whould I bother to file firefox bug report if they seem determined to put me in the "dark"?).

There come a point where user discard suppliers/vendors, and IMO Mozilla/Firefox is trending very close to that line.


Expected Results:
Users should always be able to (easily) determine the number of windows/tabs involved in a session. (Also of use would be how many site have open connections, potentially due to Javascripts) -- i.e. what is the "load" that a mozilla/firefox session is placing on one machine and where is it coming from? If you cannot answer those question one is not serving the end user.

Mozilla/firefox when it switched from sessionstore.js to places.sqlite a a storage mechanism for it session state, should have provided utility which extracted the # window / # tab from such file so the end-user could determine the complexity of their session-state.

It is a flaw in the mentality of most firefox / mozilla developer that everyone run "simple" sessions. Simple session are easy. There are people out in the real world that run complex sessions, and the skill and expertise of the developer will be judged on the basis of how such complex session are handled. Do they restore reliably and hopefully quickly (both Firefox and Chrome fall down in this area). Do they provide the ability to analyze session complexity and CPU or Network use? (Firefox trail Chrome in this area -- and took a big step backwards in the transitation from sessionstore.js to places.sqlite without providing session state reporting software.) I am going to tend to go with the system which provides me with the most information and the most control. And Firefox currently (3.5+) is failing miserably in that respect.
