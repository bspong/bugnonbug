WorkerDebugger should be unregistered when worker is frozen.
Currently, the worker debugger API provides a way to check whether a worker is frozen or not, and to detect when it freezes/thaws.

The reason we have this API is that we use the window that owns the worker to determine what page it belongs to. When a page that owns a worker is moved into the bfcache, the worker is frozen, but it window is still the same a the new page that is loaded in the tab. Consequently, we need to remove worker from the list of worker for a given page when they are frozen, and re-add them when they are thawed.

This solution wa slightly buggy to begin with, a worker are also frozen when the main thread suspends worker event to create the illusion that it is blocked. Bug 1178721 will fix that problem by only queueing the event generated by worker on the main thread, without actually freezing them.

Once bug 1178721 lands, the only time a worker will be frozen is when the page that owns them is moved to the bfcache. Whenever that happens, the worker need to be removed from the list of debuggable workers, and re-added when it is thawed.

This made me realise that we don't actually need a separate API for this: we can simply unregister and close the worker debugger for a given worker when it is frozen, and register a new worker debugger when it is thawed. The result is a significant simplification of the worker debugger API.
