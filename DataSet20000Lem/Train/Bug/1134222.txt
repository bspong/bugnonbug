[e10s] "Save Link As..."/"Bookmark This Link" in remote browser cause unsafe CPOW usage warning
+++ This bug wa initially created a a clone of Bug #1133577 +++

STR:

1) Visit a site with some link on it in an e10s window
2) Right-click on a link, and choose "Save Link As..."

This cause some "unsafe CPOW usage" warning in the Browser Console.

In browser/base/content/nsContextMenu.js:

// Save URL of clicked-on link.
saveLink: function() {
var doc = this.target.ownerDocument; <-- Causes CPOW warning
var linkText;
// If selected text is found to match valid URL pattern.
if (this.onPlainTextLink)
linkText = this.focusedWindow.getSelection().toString().trim();
else
linkText = this.linkText();
urlSecurityCheck(this.linkURL, this.principal);

this.saveHelper(this.linkURL, linkText, null, true, doc);
},


in browser/base/content/utilityOverlay.js:

// Gather all descendent text under given document node.
function gatherTextUnder ( root )
{
var text = "";
var node = root.firstChild; <-- Causes CPOW warning
var depth = 1;
while ( node && depth > 0 ) {
// See if this node is text.
if ( node.nodeType == Node.TEXT_NODE ) { <-- Causes CPOW warning
// Add this text to our collection.
text += " " + node.data; <-- Causes CPOW warning
} else if ( node instanceof HTMLImageElement) { <-- Causes CPOW warning [complex, image]
// If it ha an "alt" attribute, add that.
var altText = node.getAttribute( "alt" ); <-- Causes CPOW warning [image]
if ( altText && altText != "" ) {
text += " " + altText;
}
}
// Find next node to test.
// First, see if this node ha children.
if ( node.hasChildNodes() ) { <-- Causes CPOW warning
// Go to first child.
node = node.firstChild; <-- Causes CPOW warning [complex]
depth++;
} else {
// No children, try next sibling (or parent next sibling).
while ( depth > 0 && !node.nextSibling ) { <-- Causes CPOW warning
node = node.parentNode; <-- Causes CPOW warning
depth--;
}
if ( node.nextSibling ) { <-- Causes CPOW warning
node = node.nextSibling; <-- Causes CPOW warning [complex]
}
}
}
// Strip leading and tailing whitespace.
text = text.trim();
// Compress remaining whitespace.
text = text.replace( /\s+/g, " " );
return text;
}

note that the amount of warning depends on the structure of the link, and I've marked up accordingly
untagged warning are just caused by <a>text</a>
[complex] tagged warning are caused by e.g. <a><em>text</em> text</a>
[image] tagged warning are caused by e.g. <a><img/></a>


Note I might make this situation even worse in bug 850378
