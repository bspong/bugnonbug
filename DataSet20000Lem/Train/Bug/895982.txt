JS debugger: use of promise in server doesn't preserve request/reply ordering
The remote protocol say that actor reply to request in the order the request were received. This is what make pipelined request work: the client can send many request to a server, and store the handler in a FIFO, to be paired up with replies.

However, when we use promise (or any defer-to-later-event-tick mechanisms, really) in the server to handle requests, it's possible for the server to send reply to pipelined request out of order.

I believe this bug can occur when source map are in use. However, DebuggerClient currently take care never to pipeline requests, so until we pipeline, this is only a theoretical problem.

I'm still a little foggy about event-driven programming, so let me spell everything out for my own sake. The following sequence is possible:

- An actor receives a request. The response depends on the result of some I/O operation, so the actor creates a promise of the result, with a 'then' function that sends the reply. Control return to the event loop.

- The actor receives a second request, and thing proceed a for the first: a second promise is created to send this request's reply, and the tick ends.

- The I/O operation complete out of order, so the second request's promise is resolved first, and it reply is sent before the first request's reply.

I'm sure this could be fixed in the server in a way that preserve all our opportunity for parallelism, but I haven't thought it through. Surely there is prior art.
