startAndCompleteDragOperation function used in newtab drag/drop testing not reliable on OS X
As part of bug 1146349 I've been working on making the native event synthesization function on DOMWindowUtils asynchronous. This cause a few test failures, and I wa able to fix them all except for browser/base/content/test/newtab/browser_newtab_drag_drop.js (and possibly browser_newtab_bug735987.js which also us the synthesized drag-and-drop function from head.js). After much investigation, I discovered that the failure I wa seeing with this test are pre-existing low-volume intermittents (bug 898317) but my patch make it fail more frequently. After much digging I finally figured out what wa going on. My investigation wa specific to OS X.

On OS X, when we synthesize a native drag operation, it end up calling nsDragService::InvokeDragSession in widget/cocoa/nsDragService.mm, which invokes NSWindow's dragImage function in AppKit. This end up doing a recursive call back into the widget, and spin up a nested event loop to handle the drag-related events. However, it seems like OS X only keep this nested event loop for a limited amount of time, and if "stuff" doesn't happen soon enough, it will terminate the nested event loop and unwind. I'm not sure exactly what "stuff" is, because the code for that is in the OS X libraries. However, in the case our code is running slow for whatever reason, OS X decides to terminate the operation prematurely. This manifest a the dragdrop shim receiving a "drop" event followed by a "dragend". Since this happens before the "dragenter" listener in startAndCompleteDragOperation triggers, that function end up hanging until the test time out and is killed.

I'm attaching a backtrace from lldb which show how starting the drag operation set up a nested call to nsAppShell::ProcessGeckoEvents. I also have printf log for the success and failure case which allowed me to figure out what's going on.
