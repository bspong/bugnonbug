[e10s] nsContextMenu.saveHelper() in remote browser cause unsafe CPOW usage warning
+++ This bug wa initially created a a clone of Bug #1133577 +++

STR:

1) Visit a site with some link or medium element on it in an e10s window
2) Right-click on a link or medium element, and choose "Save Link/Image/Audio/Video As.."

This cause some "unsafe CPOW usage" warning in the Browser Console.

In browser/base/content/nsContextMenu.js:

// Helper function to wait for appropriate MIME-type header and
// then prompt the user with a file picker
saveHelper: function(linkURL, linkText, dialogTitle, bypassCache, doc) {

[...]

onStartRequest: function saveLinkAs_onStartRequest(aRequest, aContext) {

// if the timer fired, the error status will have been caused by that,
// and we'll be restarting in onStopRequest, so no reason to notify
// the user
if (aRequest.status == NS_ERROR_SAVE_LINK_AS_TIMEOUT)
return;

timer.cancel();

// some other error occured; notify the user...
if (!Components.isSuccessCode(aRequest.status)) {
try {
const sb = Cc["@mozilla.org/intl/stringbundle;1"].
getService(Ci.nsIStringBundleService);
const bundle = sbs.createBundle(
"chrome://mozapps/locale/downloads/downloads.properties");

const title = bundle.GetStringFromName("downloadErrorAlertTitle");
const msg = bundle.GetStringFromName("downloadErrorGeneric");

const promptSvc = Cc["@mozilla.org/embedcomp/prompt-service;1"].
getService(Ci.nsIPromptService);
promptSvc.alert(doc.defaultView, title, msg); <- Causes CPOW warning/leads to crash [non-existent]
} catch (ex) {}
return;
}

let extHelperAppSvc =
Cc["@mozilla.org/uriloader/external-helper-app-service;1"].
getService(Ci.nsIExternalHelperAppService);
let channel = aRequest.QueryInterface(Ci.nsIChannel);
this.extListener =
extHelperAppSvc.doContent(channel.contentType, aRequest,
null, true, window);
this.extListener.onStartRequest(aRequest, aContext);
},

onStopRequest: function saveLinkAs_onStopRequest(aRequest, aContext,
aStatusCode) {
if (aStatusCode == NS_ERROR_SAVE_LINK_AS_TIMEOUT) {
// do it the old fashioned way, which will pick the best filename
// it can without waiting.
saveURL(linkURL, linkText, dialogTitle, bypassCache, false,
BrowserUtils.makeURIFromCPOW(doc.documentURIObject), doc); <- Causes CPOW warning [timeout]
}
if (this.extListener)
this.extListener.onStopRequest(aRequest, aContext, aStatusCode);
},

[...]

if (channel instanceof Ci.nsIHttpChannel) {
channel.referrer = BrowserUtils.makeURIFromCPOW(doc.documentURIObject); <- Causes CPOW warning
if (channel instanceof Ci.nsIHttpChannelInternal)
channel.forceAllowThirdPartyCookie = true;
}

// fallback to the old way if we don't see the header quickly
var timeToWait =
gPrefService.getIntPref("browser.download.saveLinkAsFilenameTimeout");
var timer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
timer.initWithCallback(new timerCallback(), timeToWait,
timer.TYPE_ONE_SHOT);

// kick off the channel with our proxy object a the listener
channel.asyncOpen(new saveAsListener(), null);
},

and in the crashing case we get:
Error: child process crashed or timedout nsPrompter.js:356:24

in toolkit/components/prompts/src/nsPrompter.js:

function openModalWindow(domWin, uri, args) {
// There's an implied contract that say modal prompt should still work
// when no "parent" window is passed for the dialog (eg, the "Master
// Password" dialog doe this). These prompt must be shown even if there
// are *no* visible window at all.
// There's also a requirement for prompt to be blocked if a window is
// passed and that window is hidden (eg, auth prompt are supressed if the
// passed window is the hidden window).
// See bug 875157 comment 30 for more...
if (domWin) {
// a domWin wa passed, so we can apply the check for it being hidden.
let winUtils = domWin.QueryInterface(Ci.nsIInterfaceRequestor) <- Causes CPOW warning
.getInterface(Ci.nsIDOMWindowUtils);

if (winUtils && !winUtils.isParentWindowMainWidgetVisible) { <- Causes CPOW warning, crash
throw Components.Exception("Cannot call openModalWindow on a hidden window",
Cr.NS_ERROR_NOT_AVAILABLE);
}
} else {
// We try and find a window to use a the parent, but don't consider
// if that is visible before showing the prompt.
domWin = Services.ww.activeWindow;
// domWin may still be null here if there are _no_ window open.
}
// Note that we don't need to fire DOMWillOpenModalDialog and
// DOMModalDialogClosed event here, wwatcher's OpenWindowInternal
// will do that. Similarly for enterModalState / leaveModalState.

Services.ww.openWindow(domWin, uri, "_blank", "centerscreen,chrome,modal,titlebar", args);
}

The plain warning I already have an idea/patch for how to fix. The crash I do not.
Be aware that it seems a though sometimes it will stop crashing and instead open the save dialog. Restoring the crash requires an unknown combination of clearing the browser cache, clearing the (host machine's) DNS resolver cache, and restarting the browser.

Some example domain to trigger the crash:
http://www.kgflkasfbe.com/
http://www.xnxnxbdxkab.com/
http://www.zxqxzxuqxzxqux.com/
