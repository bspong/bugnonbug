Firefox rainbow beachball lock up frequently with ~10 window each with ~10 tabs, have to force quit multiple time daily
User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1

Steps to reproduce:

Open Firefox with about 10 windows, each with about 10 tab on average. Then nearly any action:



Actual results:

Firefox is responsive for a bit (minutes?) but then quickly bog down, and then *any* of the following action cause a rainbow beachball cursor, CPU of almost 100% usage and unresponsiveness:

* open a new window
* start typing a URL in the URL bar, drop down appears, then beachball. You can drag window and the drop down stay in place.
* refresh one of the existing tab
* open a new tab
* quit

Some of these improved in responsiveness with FF6 over 5, and I have to force quit le often, but it's still horrible from a responsiveness perspective.

What is FF spending all that processor time doing that ha nothing related to the active user thread to the point where it becomes unresponsive?


Expected results:

NEVER show the rainbow beachball. This is an architectural problem, it should never be possible for *any* action to cause the user event thread to be blocked / starved.

Once that is fixed, then start attacking the cause of spiking CPU usage to nearly 100%.

I am running on le than a month old MacBook Air 11" 4GB RAM with OSX Lion. Same result (but worse) on previous generation MacBook Air 11"n 4GB RAM with OSX Snow Leopard.

Sidenote: I would love it if there wa some tool that allowed me to simply export my current window/tab state a a *single double-clickable file* that I could then email or share with anyone else, who could easily open the file, have it launch/open Firefox, and then open the same exact window with the same exact tab (for extra credit, include tab history a well).

This would greatly help pas on more information about what windows/tabs are open so that folk working on performance, responsiveness etc. could have a more precise starting point for debugging such problems.
