WeaveCrypto us ctypes to access NSS directly and break all assumption about NSS shutdown
WeaveCrypto us ctypes to access NSS directly, which is problematic for a number of reasons. ctypes combine the underlying memory unsafety of c with the limited static check of javascript, so we're starting off with the worst of both world here. That's mostly a philosophical point, though. More concretely, WeaveCrypto currently violates all of Gecko's assumption about how we properly (and safely) shut down NSS. That is, at some point when shutting down Gecko, NSS will go away. Before that point, anything that us NSS resource and function must ensure that NSS won't be yanked out from under them. There's no way to do this with how WeaveCrypto is currently implemented. At that point, all NSS resource must be released so they don't leak. We can indirectly do this, but there is a better, unified mechanism that can't be accessed from WeaveCrypto. After that point, no NSS resource or function may be used. Again, there's a workaround to make this work, but again there's a better, unified mechanism that can't be directly accessed.

WeaveCrypto should really look more like services/crypto/modules/utils.js which (mostly) us interface to primitive implemented in PSM (in C++) that are aware of and can properly handle NSS shutdown.
