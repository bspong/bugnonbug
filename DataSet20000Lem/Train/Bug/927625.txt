requestAnimationFrame-based WebGL animation periodically stutter in Firefox.
Visit either of these links:

https://dl.dropboxusercontent.com/u/40949268/emcc/Pong/Pong.html
https://dl.dropboxusercontent.com/u/40949268/emcc/VSyncTest/VSyncTest.html

Both page are Emscripten-based application that use requestAnimationFrame() a the mechanism to update animation. In the first link, the update function doe a time-independent fixed update of the ball at 6 pixel per frame. In the second link, a vertical bar trace through the screen at a fixed rate that can be controlled with left&right keyboard buttons.

The profiler at the bottom of the screen show how much time is spent in the update function requestAnimationFrame() calls. The bottom bright green/yellow/red part of the graph represents the time spent in the requestAnimationFrame() function itself (which is typically very small < 1msec), whereas the darker green/yellow/red part stacked on top of the bright part show the time spent between two subsequent requestAnimationFrame() calls. Each column of pixel represents a single call to requestAnimationFrame().

In all tested browser (Chrome 30, FF24, IE11 Release Preview, Opera 17) on my Windows laptop, the profiler graph at the bottom show good frametimes of around ~16 msecs, so it look like requestAnimationFrame() is called at good interval to reach the 60fps vsync target of my laptop.

On Firefox however, visually estimating the motion of the white ball and the vertical bar look good at times, but at other time the motion is jumpy, or stuttering. In Chrome, IE11 Release Preview and Opera the motion doe not exhibit this kind of jumpiness but is much smoother.

I am not sure whether this is attributable to tearing in the lack of vsync - in the second link it look like the vsync tear artifact, i.e. the horizontal "cut" line dividing the previous and current frame doe not seem to be present. Does Firefox enforce vsync on when requestAnimationFrame is used?

Expected: the animation in both example should be pleasingly smooth, since the application requires only ~1msec to update, which should be plenty of time to hit the 60fps vsync animation rate.
