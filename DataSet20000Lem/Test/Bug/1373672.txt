FormDataListener.handleEvent() is extremely expensive when running speedometer
See this profile that I captured running about 100 or so test into a full run of the Speedometer test suite at http://speedometer2.benj.me/:

https://perfht.ml/2sGyu12

The code: <https://searchfox.org/mozilla-central/rev/20d16dadd336e0c6b97e3e19dc4ff907744b5734/browser/components/sessionstore/content/content-sessionStore.js#452>

We are spending a whopping 118 *ms* only in this function. As far a I can tell, this is all time being spent in cross-compartment wrapper and Xray wrapper code. The JS code is trying to see whether the event's global is a frame that ha been created after the load event by checking to see if it appears in a map (gFrameTree) which is what creates all of this overhead.

Note also that this benchmark ha a lot of checkboxes inside it, for which we issue "input" and "change" event immediately after each other, so this code ha 2x overhead for that <https://searchfox.org/mozilla-central/rev/20d16dadd336e0c6b97e3e19dc4ff907744b5734/dom/html/HTMLInputElement.cpp#4333>. I'm not sure why it need to handle both event at all.

Just to get a rough sense of the amount this is hurting Speedometer, commenting out these two line on my super fast machine increase our benchmark score by about 4-6 points!

I'd like to discus what we can do with this code. We can probably improve thing a bit by:

* Moving FrameTree.jsm into content-sessionStore.js to eliminate the cross-compartment wrapper in between the objects.
* Not listening on change event (as I think we should fire input event for everything we care about here)
* Moving FrameTree.jsm logic into C++ somehow (I haven't studied it very closely to figure out what it doe yet)
* Move the entire thing into C++ (my preferred approach)
* Consider something entirely different, such a not saving this information until the user interacts with the form control or something along those lines.
