Scratchpad should evaluate expression in the scope of the content window, not in a sandbox
Expressions entered into the Web Console and the Scratchpad are evaluated in a sandbox global whose prototype is the content window: this.__proto__ === window.

This ha some nice effects: variable declared in a Scratchpad are effectively local to that scratchpad, instead of polluting content's global; you can play around. If one doe want to create a global variable visible to content, one can always simply create a property on window: 'window.newGlobal = "fruit"'.

However, I suspect this is actually not helpful. The simplest mental model for developer is for code entered in the Web Console / Scratchpad to be evaluated just like the content of their <script> elements. Explaining why 'x' show the content's x but 'x = 5' doesn't change it (but 'x.y = 5' *is* visible to content!) involves a degree of detail that only more engaged developer have any interest in.

It's certainly valuable to provide utility function that aren't present in content; but that can be done by evaluating expression in the scope of a 'with' expression applied to an object with the utility function a it properties. 'With' isn't my favorite construct, but since we completely control the object's properties, the shortcoming of 'with' use in general don't apply; once you've decided to introduce some Web Console-only functions, the behavior of 'with' is pretty much what you need. (Don't forget that the following creates binding for x and y on the global:

with (o) { var x = 5; y = 6; }

So 'with' doesn't re-introduce the sandbox problem I mention above.)
