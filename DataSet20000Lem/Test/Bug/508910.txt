AJAX POST-requests make SCRIPT-tags download using POST
User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; WOW64; Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.5.21022; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 4.0.20506; Creative AutoUpdate v1.40.01)
Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 4.0.20506)

When doing an AJAX POST-request (in my case using jQuery) to insert HTML that contains <SCRIPT SRC="...">-tags into the DOM cause these SCRIPT-tags to load the file using POST instead of GET... the request header for the script file also report them a being requested by XMLHttpRequest, which I would believe is incorrect a the injection into the DOM ha nothing to do with them being loaded by AJAX or not. The main issue (for me) this ha is that it this bypass the cache and always downloads the script-files, regardless of them being cached or not.

It should be noted that the actual problem most likely is that AJAX request overwrite the request method for all subsequent load with whatever request method it is set to use. However, it doe not appear to affect the loading of images, only SCRIPT-tags.

Reproducible: Always

Steps to Reproduce:
Load a page that contains <SCRIPT SRC="..."> using an AJAX POST-request from any page (that wa loaded using GET) and insert it anywhere into the DOM.
Actual Results:
The script-file is requested using POST (regardless of being cached) and is also specified a being requested by XMLHttpRequest... even though the page itself wa loaded using GET and the script-file is loaded during the DOM-injection and not specifically by the AJAX request.

Expected Results:
The script-file should be loaded using GET (or possibly whatever request method wa used to load the page itself) and should not be specified a being requested by XMLHttpRequest.

I used jQuery for the AJAX request and DOM-injection, which might affect the result in some way, but I doubt the root of this problem is jQuery but rather a bug in Firefox (IE8 handle this "correctly" and us the cached script-files).
