[e10s] "Open Link in New Tab" in remote browser cause unsafe CPOW usage warning
STR:

1) Visit a site with some link on it in an e10s window
2) Right-click on a link, and choose "Open Link in New Tab"

This cause some "unsafe CPOW usage" warning in the Browser Console.

In browser/base/content/nsContextMenu.js:

// Open linked-to URL in a new tab.
openLinkInTab: function() {
var doc = this.target.ownerDocument; <-- Causes CPOW warning
urlSecurityCheck(this.linkURL, this.principal);
var referrerURI = doc.documentURIObject; <-- Causes CPOW warning

// if the mixedContentChannel is present and the referring URI pass
// a same origin check with the target URI, we can preserve the user
// decision of disabling MCB on a page for it's child tabs.
var persistAllowMixedContentInChildTab = false;

if (this.browser.docShell && this.browser.docShell.mixedContentChannel) {
const sm = Services.scriptSecurityManager;
try {
var targetURI = this.linkURI;
sm.checkSameOriginURI(referrerURI, targetURI, false);
persistAllowMixedContentInChildTab = true;
}
catch (e) { }
}

let params = this._openLinkInParameters(doc, {
allowMixedContent: persistAllowMixedContentInChildTab,
});
openLinkIn(this.linkURL, "tab", params);
},

...

_openLinkInParameters : function (doc, extra) {
let params = { charset: doc.characterSet,
referrerURI: doc.documentURIObject, <-- Causes CPOW warning
noReferrer: BrowserUtils.linkHasNoReferrer(this.link) };
for (let p in extra)
params[p] = extra[p];
return params;
},

in toolkit/modules/BrowserUtils.jsm:

/**
* Return true if linkNode ha a rel="noreferrer" attribute.
*
* @param linkNode The <a> element, or null.
* @return a boolean indicating if linkNode ha a rel="noreferrer" attribute.
*/
linkHasNoReferrer: function (linkNode) {
if (!linkNode)
return false;

let rel = linkNode.getAttribute("rel"); <-- Causes CPOW warning
if (!rel)
return false;

// The HTML spec say that rel should be split on space before looking
// for particular rel values.
let value = rel.split(/[ \t\r\n\f]/);
return values.indexOf('noreferrer') != -1;
},

in toolkit/modules/RemoteWebNavigation.jsm

loadURI: function(aURI, aLoadFlags, aReferrer, aPostData, aHeaders) {
if (aPostData || aHeaders)
throw Components.Exception("RemoteWebNavigation doesn't accept postdata or headers.", Cr.NS_ERROR_INVALID_ARGS);

this._browser._contentTitle = "";
this._sendMessage("WebNavigation:LoadURI", {
uri: aURI,
flags: aLoadFlags,
referrer: aReferrer ? aReferrer.spec : null <-- Causes CPOW warning
});
},
