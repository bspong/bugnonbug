MozSocialAPI injectController: unable to attachToWindow for resource://gre-resources/hiddenWindow.html: TypeError: containingBrowser is null
This is seen on every startup when I open the Browser Console. This is the offending function and the console message is generated by the statement within the catch(e){}.

> // Called on document-element-inserted, checks that the API should be injected,
> // and then calls attachToWindow as appropriate
> function injectController(doc, topic, data) {
>   try {
>     let window = doc.defaultView;
>     if (!window || PrivateBrowsingUtils.isContentWindowPrivate(window))
>       return;
> 
>     // Do not attempt to load the API into about: error pages
>     if (doc.documentURIObject.scheme == "about") {
>       return;
>     }
> 
>     let containingBrowser = window.QueryInterface(Ci.nsIInterfaceRequestor)
>                                   .getInterface(Ci.nsIWebNavigation)
>                                   .QueryInterface(Ci.nsIDocShell)
>                                   .chromeEventHandler;
>     // limit injecting into social panels or same-origin browser tabs if
>     // social.debug.injectIntoTabs is enabled
>     let allowTabs = false;
>     try {
>       allowTabs = containingBrowser.contentWindow == window &&
>                   Services.prefs.getBoolPref("social.debug.injectIntoTabs");
>     } catch(e) {}
> 
>     let origin = containingBrowser.getAttribute("origin");
>     if (!allowTabs && !origin) {
>       return;
>     }
> 
>     // we always handle window.close on social content, even if they are not
>     // "enabled".  "enabled" is about the worker state and a provider may
>     // still be in e.g. the share panel without having their worker enabled.
>     hookWindowCloseForPanelClose(window);
> 
>     SocialService.getProvider(doc.nodePrincipal.origin, function(provider) {
>       if (provider && provider.enabled) {
>         attachToWindow(provider, window);
>       }
>     });
>   } catch(e) {
>     Cu.reportError("MozSocialAPI injectController: unable to attachToWindow for " + doc.location + ": " + e);
>   }
> }