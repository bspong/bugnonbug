When stepping through source mapped code, we should continue stepping until we are at a new location in the original source
When treating JS as a target for compilation, often we will have multiple operations in JS mapping back to something that is considered a single operation in the original source. For example, imagine a language like Python which will automatically upgrade ints to big ints as needed. If you were to compile an addition in Python to asm.js, you wouldn't just generate an add, you would generate overflow checks, and branches for upgrading to your big ints if needed, etc. This would result in the debugger user having to step multiple times for the same addition operation in the original source before the cursor moved past the addition.

To improve this user experience, when we are stepping in the debugger server, we should check source map the current frame and if it is still the same source mapped location as before, we should step again. This process should be repeated until the current frame's source mapped location is different than what it originally was before stepping (which would indicate the completion of the operation in the original source language).

Side note: I think I can lay the ground work for this while implementing blackboxing. The generic idea is the same for both features: the debugger server should keep stepping until a given predicate is fulfilled.