JSON.parse doesn't support single-quoted string literals
User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.1b3) Gecko/20090305 Firefox/3.1b3 (.NET CLR 3.5.30729)
Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.1b3) Gecko/20090305 Firefox/3.1b3 (.NET CLR 3.5.30729)

According to ECMA-262, a StringLiteral can be delimited using a pair of matching single quotation marks or a pair of matching double quotation marks, and JavaScript seems to match the same behaviour.  I can create a JavaScript object literal with string properties that are delimited by single quotation marks, but wrapping the object literal in double quotation marks and using JSON.parse() to parse it causes an error to be logged to the error console.

Reproducible: Always

Steps to Reproduce:
1. Create a JavaScript object in a single line (for simplicity's sake):
    var bodyObj = { 'body' : [ { 'div' : [ 'Hello World!' ] } ] };

2. Pass the resulting object as an argument to window.alert():
    window.alert(bodyObj);

3. Wrap the original object in double quotation marks and pass the resulting string as a value to JSON.parse():
    var bodyObj2 = JSON.parse("{ 'body' : [ { 'div' : [ 'Hello World!' ] } ] }");

4. Again, use window.alert():
    window.alert(bodyObj2);
Actual Results:  
1. An object literal was created and stored in the 'bodyObj' variable.

2. A dialog box popped up, showing that 'bodyObj' was indeed created.

3. JSON.parse() failed to parse the string.

4. No dialog box popped up.

Expected Results:  
Both step 2 and step 4 should have resulted in the same behaviour.  However, because JSON.parse() failed in step 3 and halted execution in that context, window.alert() in step 4 was never executed.

See attached test case if any of this is unclear.