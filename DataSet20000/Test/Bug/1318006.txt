Prevent "TypeError: can't access dead object" exceptions on webconsole getCachedMessages
As part of Bug 1211665 (Log messages for background scripts should appear in extension debugger), the originAttributes of the context that has produced the log message is stored in the console message event.

The console message event is also saved in a cache of logged messages, and the cached messages are then retrieved by the webconsole actor when the webconsole panel is loaded.

Unfortunately the originAttributes reference can become a dead object (e.g. because the log message has been produced by a content script's sandbox that has been nuked when the related addon is disabled/uninstalled/reloaded/upgraded) and the webconsole "getCachedMessages RDP request" will fail because of an "accessing dead wrapper" exception raised when the array of cached messages is serialized by 'devtools/shared/transport/transport.js' to be sent to the client.

To prevent the "TypeError: can't access dead object" exception from breaking the webconsole panel loading we should:

- remove the originAttributes property from the cached messages when they are collected by the webconsole actor (in the prepareConsoleMessageForRemote, http://searchfox.org/mozilla-central/source/devtools/server/actors/webconsole.js#1735-1759)

to be able to still filter the console messages using the originAttributes properties even after the context that has originated the console message has been destroyed:

- clone the original originAttributes property when it has been received by the 'dom/console/ConsoleAPIStorage.js' and before it has been stored in the cached messages (in the recordEvent method, http://searchfox.org/mozilla-central/source/dom/console/ConsoleAPIStorage.js#123-139)