Debugging auto-close XUL panels extremely painful
The basic problem is that as soon as someone clicks away from the panel (and into a debugging tool, like, say Firebug (or, once bug 777674 gets fixed, Firefox's own DOM inspector), the panel disappears (i.e. is no longer laid out).  So if one needs to work on cleaning up look-and-feel or debugging CSS rules, it's substantially harder than with (e.g.) the sidebar, which provides much worse user experience.

As a proof-of-concept, I've implemented a hacky add-on that, when installed, causes the panel to be pinned open until the developer clicks on the toolbar button that opened the panel.  It's working great for the moment, but has fragile dependencies on Firefox frontend details that are expected to break it soon. A real solution in the tree (even as simple as a hidden pref) would be wonderful.

Here's an email from :mixedpuppy (quoted with permission):

I wanted to open a short conversation about possible approaches to improving the debuggability of remote content inside panels.  Dan has brought up the issue they have with development on Talkilla using the panels in social api.  I believe jetpack panels have similar issues, and in my own experience I've often hacked panels to keep them open so I could more easily inspect into them.  Since, with Australis, I want to migrate the social panels fully over to the widget system, and IIUC jetpack has done that already, I'm including those I know who are familiar with the widget system as well.

The proposals I've heard from Dan and Florian is 1) using a pref that would set noautohide on the panel or 2) allow for a meta tag in the content to turn on noautohide.

I'd like to see if these approaches are acceptable or if anyone has a better approach.  Dan and Florian can probably fill in better on some of the development issues that Talkilla has run into with panels.