Avoid using `getChildScripts` in `onNewScript`
There's no real reason we need to iterate the child scripts at all on `onNewScript`. In fact it's misleading because `script.getChildScripts` does not recursively return all the nested scripts, it only returns the immediate children.

Our breakpoint architecture has evolved over time and I think there used to be a reason we do it, but I talked with ejpbruel on IRC and he agreed that we should do this simple approach now:

* `setBreakpoint` in the SourceActor takes a line/col and has the responsibility to set a breakpoint on ALL scripts at that location. It will appropriately check if a script already has a breakpoint. When it's done we know that all nested scripts have an activated breakpoint.

* `onNewScripts` and `_restoreBreakpoints` only need to call `_addScript` with a top-level script. This approach is faster because we don't need to go through all the sourcemapping machinery (when resolving a script to a SourceActor and a location in that) for each individual script. I'm not entirely sure what's slow in that code path, but from my experiments it's not the fastest.

It's very fast to just give `_addScript` only top-level scripts, and let `setBreakpoint` take care of the nested child scripts.

One question is do we need to do the start/end line filtering in `_addScript` that we do now? Theoretically if we always pass it top-level scripts, we don't need to, we are basically activating all breakpoints for the entire source.

If we do need to do the filtering, we can't do this until we fix an issue with the Debugger.Script `lineCount` property not always being correct. This blocks on bug 979094 if so.

Note that in the case where the debugger is opened on an existing page, top-level scripts may be GCed. The `setBreakpoint` function in the SourceActor will still have to handled possibly "pending" breakpoints and not assume the top-level script is available.

The end result of this bug, though, should be a *lot* faster debugger loading when a large, complex page is refreshed. I've seen rough results going from ~150ms to ~30ms, but we'll need to do more benchmarking here.