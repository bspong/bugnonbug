[e10s] "Save Page|Frame As..." in remote browser causes unsafe CPOW usage warnings
+++ This bug was initially created as a clone of Bug #1133577 +++

STR:

1) Visit a site in an e10s window
2) Right-click on the page, and choose "Save Page As..."

This causes some "unsafe CPOW usage" warnings in the Browser Console.

In toolkit/content/widgets/remote-browser.xml:

      <property name="contentDocumentAsCPOW" <- Causes CPOW warning
                onget="return this.contentWindowAsCPOW ? this.contentWindowAsCPOW.document : null"
                readonly="true"/>


In toolkit/content/contentAreaUtils.js

function saveDocument(aDocument, aSkipPrompt)
{
  if (!aDocument)
    throw "Must have a document when calling saveDocument";

  // We want to use cached data because the document is currently visible.
  var ifreq =
    aDocument.defaultView <- Causes CPOW warning
             .QueryInterface(Components.interfaces.nsIInterfaceRequestor);

  var contentDisposition = null;
  try {
    contentDisposition =
      ifreq.getInterface(Components.interfaces.nsIDOMWindowUtils) <- Causes CPOW warning
           .getDocumentMetadata("content-disposition");
  } catch (ex) {
    // Failure to get a content-disposition is ok
  }

  var cacheKey = null;
  try {
    cacheKey =
      ifreq.getInterface(Components.interfaces.nsIWebNavigation) <- Causes CPOW warning
           .QueryInterface(Components.interfaces.nsIWebPageDescriptor);
  } catch (ex) {
    // We might not find it in the cache.  Oh, well.
  }

  if (cacheKey && Components.utils.isCrossProcessWrapper(cacheKey)) {
    // Don't use a cache key from another process. See bug 1128050.
    cacheKey = null;
  }

  internalSave(aDocument.location.href, aDocument, null, contentDisposition, <- Causes CPOW warning
               aDocument.contentType, false, null, null, <- Causes CPOW warning
               aDocument.referrer ? makeURI(aDocument.referrer) : null, <- Causes CPOW warning
               aDocument, aSkipPrompt, cacheKey);
}

[...]

function internalSave(aURL, aDocument, aDefaultFileName, aContentDisposition,
                      aContentType, aShouldBypassCache, aFilePickerTitleKey,
                      aChosenData, aReferrer, aInitiatingDocument, aSkipPrompt,
                      aCacheKey)
{
[...]

    continueSave();
  } else {
    var charset = null;
    if (aDocument)
      charset = aDocument.characterSet; <- Causes CPOW warning
    else if (aReferrer)
      charset = aReferrer.originCharset;
    var fileInfo = new FileInfo(aDefaultFileName);
    initFileInfo(fileInfo, aURL, charset, aDocument,
                 aContentType, aContentDisposition);
    sourceURI = fileInfo.uri;

[...]
  }

[...]

function getDefaultFileName(aDefaultFileName, aURI, aDocument,
                            aContentDisposition)
{
[...]

  let docTitle;
  if (aDocument) {
    // If the document looks like HTML or XML, try to use its original title.
    docTitle = validateFileName(aDocument.title).trim(); <- Causes CPOW warning
    if (docTitle) {
      let contentType = aDocument.contentType; <- Causes CPOW warning
      if (contentType == "application/xhtml+xml" ||
          contentType == "application/xml" ||
          contentType == "image/svg+xml" ||
          contentType == "text/html" ||
          contentType == "text/xml") {
        // 2) Use the document title
        return docTitle;
      }
    }
  }

[...]
}