Debugging protocol server should drop connection if packet framing is bad
The behavior of DebuggerTransport when presented with incorrectly-framed packets raises the possibility that, if a developer enables the debugger on a known TCP port, a web page could spoof a debugging protocol conversation with a crafted XHR to localhost. To make this more difficult, DebuggerTransport should drop the connection when it receives an improperly framed packet.

The debugging protocol as implemented uses a framing layer not documented on https://wiki.mozilla.org/Remote_Debugging_Protocol. The byte stream is broken into a series of packets of the form "<length>:<body>", where <length> is parsed by the JavaScript parseInt function, and gives the length of <body> in bytes. <body> is then passed to an nsIScriptableUnicodeConverter's ConvertToUnicode method, and then to JSON.parse.

At present, DebuggerTransport doesn't validate <length> very carefully, so one could imagine attacks in which an XHR's headers got skipped and the body began to be interpreted as debugging requests. While I don't know of a specific exploit right now, there's no reason for this flexibility, so we might as well make life a little harder for folks.

Note that the debugging server is only enabled when a preference is set, so this doesn't affect anyone who hasn't asked for this sort of trouble. Furthermore, the protocol isn't designed to be any sort of security boundary; any attacker with the ability to make their own TCP connections could simply connect and start talking, and gain full control of the browser through the chrome debugger. There's no authentication, and no confidentiality or integrity checking whatsoever. This bug only helps protect developers who have opted in against a specific kind of attacker.