startAndCompleteDragOperation function used in newtab drag/drop testing not reliable on OS X
As part of bug 1146349 I've been working on making the native event synthesization functions on DOMWindowUtils asynchronous. This causes a few test failures, and I was able to fix them all except for browser/base/content/test/newtab/browser_newtab_drag_drop.js (and possibly browser_newtab_bug735987.js which also uses the synthesized drag-and-drop function from head.js). After much investigation, I discovered that the failures I was seeing with this test are pre-existing low-volume intermittents (bug 898317) but my patch make it fail more frequently. After much digging I finally figured out what was going on. My investigation was specific to OS X.

On OS X, when we synthesize a native drag operation, it ends up calling nsDragService::InvokeDragSession in widget/cocoa/nsDragService.mm, which invokes NSWindow's dragImage function in AppKit. This ends up doing a recursive call back into the widget, and spins up a nested event loop to handle the drag-related events. However, it seems like OS X only keeps this nested event loop for a limited amount of time, and if "stuff" doesn't happen soon enough, it will terminate the nested event loop and unwind. I'm not sure exactly what "stuff" is, because the code for that is in the OS X libraries. However, in the cases our code is running slow for whatever reason, OS X decides to terminate the operation prematurely. This manifests as the dragdrop shim receiving a "drop" event followed by a "dragend". Since this happens before the "dragenter" listener in startAndCompleteDragOperation triggers, that function ends up hanging until the test times out and is killed.

I'm attaching a backtrace from lldb which shows how starting the drag operation sets up a nested call to nsAppShell::ProcessGeckoEvents. I also have printf logs for the success and failure cases which allowed me to figure out what's going on.