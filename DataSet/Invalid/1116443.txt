Cannot pass an array of nsiDomWindows between js modules
Created attachment 8542503
bugreport.xpi

I'm writing a bootstrap firefox extension. Using firefox developer edition v36.2a

I have two problems that seem related, which I don't understand. The first one, mere annoyance:

my bootstrap Console.utils.imports a js file which loads my application (creates a namespace object and imports all other js files as properties on the namespace. All other files include this same namespace file and thus have access to each other. They even store state and everything works much similar to how nodejs caches modules, eg it seems there is only one object of every class which is shared throughout the whole application. So far, So good, Now, this happens:

my namespace file does:

namespace.console  = Components.utils.import( 'you know the one/console.jsm' )
namespace.Services = Components.utils.import( 'you know the one/Services.jsm')
namespace.Cu       = Components.utils

Now in another file that imports this file, I get the namespace object, but namespace.Cu will be undefined. console.log( namespace ) is fine however and shows me Cu, that I can expand and see all its properties and so on... All other things (console, Services, my own classes) are fine, but trying Cc, Ci etc from Components -> undefined.

In another place in my app I have a function (in file A) which returns an array of nsiDomWindows. A function in file B calls it and when it arrives, similar story: in console all looks fine, Array with ChromeWidows that I can look at. But it's no longer an array actually and is of type object and array[ 0 ] is undefined. If I put both classes in the same file they're fine.

For further confusion, I think I have already used this method in another file and all was fine:

// A.js
//
function A()
{
    b = new B()
    c = new C()

    let windows = b.windowList () // works fine, yields an actual valid array
                                  // with valid windows inside
    c.doSomething()               // broken, see below 
    c.doSomething( windows )      // passing it as a parameter 
                                  // doesn't help, still broken
}

// B.js
//
function B()
{
    this.windowList = function windowList()
    {
        let result = []

        // get open windows from nsiWindowMediator
        // foreach...
        // 
        result.push( nsiDomWindow )

        console.log( typeof result ) // Array -> it's completely valid here

        return result
    }
}


// C.js
//
function C()
{
    this.b = new B()


    this.doSomething = function doSomething( windows )
    {
        if( ! windows )

            windows = this.windowList()


        console.log( windows ) // in the console shows:
                               // Array[ ChromeWindow -> about:home ]
                               // I can inspect all it's properties, looks ok

        console.log( typeof windows )           // object
        console.log( windows.constructor.name ) // undefined

        console.log( windows[ 0 ]   )           // undefined

        // looping over the object properties shows that it does
        // have 1 property called '0' which points at undefined
        // note: there was only one open window in the array.
    }
}

// Note: the order in which I use Components.utils.import on these is B, C, A

I also wondered if this had todo with security measures in gecko, but no wrapper objects are to be seen anywhere, and afaik they should only shield content code from chrome code (this is all chrome code).

It's the kind of bugs that frustrates me, because I can't think of one sensible reason why the return value of a function shouldn't be the same thing on two sides of the call.

Lucky enough there is a workaround, I will have my make file concatenate all my js files and be done with Components.utils once and for all. Seems the less of the mozilla API I have to use, the happier and more productive I'll be.

I'm seeing errors from mozilla code as well. I just had an error saying "shouldLog is not a function" in Console.jsm. This function is clearly defined higher up in that file. The line that throws the error is an anonymous function that is being returned. That should inherit the scope without a doubt, but it doesn't. It might be that something is mangling return values and that this is related. 

I attached a little addon that demonstrates the first problem (Cu being undefined). You will see the objects in the console to inspect them. It does this twice, once from bootstrap.js and once from Core.js. From bootstrap.js it works, from Core.js not. Note that if you look at the object Bugreport console will show you that all it's properties are on there like they should. 

There's a corresponding question on Stack Overflow: https://stackoverflow.com/questions/27690829/weird-gecko-behaviour-trying-to-pass-an-array-of-nsidomwindows-between-js-modul